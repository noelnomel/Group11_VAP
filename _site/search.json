[
  {
    "objectID": "Station/station.html",
    "href": "Station/station.html",
    "title": "Stations",
    "section": "",
    "text": "#library(devtools)\n#install_github(\"andrew-loh/neaSG\", force = TRUE)\n\n\npacman::p_load(tmap, sf, tidyverse, sfdep, mapview, leaflet.providers, neaSG)\n\n\nstn &lt;- get_weatherstns()\n\n\nglimpse(stn)\n\nRows: 63\nColumns: 5\n$ id                 &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\",…\n$ device_id          &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\",…\n$ name               &lt;chr&gt; \"Alexandra Road\", \"Ang Mo Kio Avenue 5\", \"Banyan Ro…\n$ location.latitude  &lt;dbl&gt; 1.29370, 1.37640, 1.25600, 1.38240, 1.31910, 1.3800…\n$ location.longitude &lt;dbl&gt; 103.8125, 103.8492, 103.6790, 103.7603, 103.8191, 1…\n\n\n\nstn_sf &lt;- st_as_sf(stn, \n                   coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326)\n\n\nglimpse(stn_sf)\n\nRows: 63\nColumns: 4\n$ id        &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\", \"S107\", …\n$ device_id &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\", \"S107\", …\n$ name      &lt;chr&gt; \"Alexandra Road\", \"Ang Mo Kio Avenue 5\", \"Banyan Road\", \"Buk…\n$ geometry  &lt;POINT [°]&gt; POINT (103.8125 1.2937), POINT (103.8492 1.3764), POIN…\n\n\n\ntmap_mode(\"view\")\n\ntm_basemap(\"CartoDB.Positron\") +\n  tm_shape(stn_sf)+\n  tm_dots(col = \"black\", size = 0.1)+\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\nstn_selected &lt;- stn_sf %&gt;% \n  filter(id %in% c(\"S60\", \"S117\", \"S116\", \"S115\", \"S113\", \"S111\", \"S107\", \"S201\", \"S50\", \"S43\", \"S44\", \"S221\", \"S24\", \"S121\", \"S109\", \"S114\", \"S900\", \"S209\", \"S104\"))\n         \nglimpse(stn_selected)\n\nRows: 19\nColumns: 4\n$ id        &lt;chr&gt; \"S109\", \"S117\", \"S114\", \"S50\", \"S107\", \"S43\", \"S113\", \"S44\",…\n$ device_id &lt;chr&gt; \"S109\", \"S117\", \"S114\", \"S50\", \"S107\", \"S43\", \"S113\", \"S44\",…\n$ name      &lt;chr&gt; \"Ang Mo Kio Avenue 5\", \"Banyan Road\", \"Choa Chu Kang Avenue …\n$ geometry  &lt;POINT [°]&gt; POINT (103.8492 1.3764), POINT (103.679 1.256), POINT …\n\n\n\ntmap_mode(\"view\")\n\ntm_basemap(\"CartoDB.Positron\") +\n  tm_shape(stn_selected)+\n  tm_dots(col = \"black\", size = 0.1)"
  },
  {
    "objectID": "Prototype/Forecast.html",
    "href": "Prototype/Forecast.html",
    "title": "Prototype: Time Series Forecasting",
    "section": "",
    "text": "The code below uses p_load() of the Pacman package to check if all the required packages are installed on the laptop. If they are, then they will be launched into the R environment.\n\n\n\nPackage\nDescription\n\n\n\n\ntidyverse\nA collection of core packages designed for data science used extensively for data preparation and wrangling.\n\n\ntsibble\nFor tidy temporal data with wrangling tools\n\n\nfable, forecast\nA collection of commonly used univariate and multivariate time series forecasting models.\n\n\ntseries\nFor performing augmented Dickey-Fuller tests to check whether a time series is stationary\n\n\n\n\npacman::p_load(readr, tidyverse, plotly, ggplot2, tsibble, tseries,\n               forecast, fable)"
  },
  {
    "objectID": "Prototype/Forecast.html#temperature-time-series-analysis",
    "href": "Prototype/Forecast.html#temperature-time-series-analysis",
    "title": "Prototype: Time Series Forecasting",
    "section": "3.1 Temperature time-series analysis",
    "text": "3.1 Temperature time-series analysis\nLet’s break down the temperature time-series analysis to look at the seasonal, trend and residual components.\n\n\nShow the code\ndata_ts.ts = ts(data_EDA$AveTemp, frequency = 12)\ndecomposed &lt;- decompose(data_ts.ts)\n\n# Plot the decomposed components\nautoplot(decomposed) +\n  ggtitle(\"Decomposition of the Temperature time-series data\") +\n  xlab(\"Year\")\n\n\n\n\n\nLet’s substract seasonality\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$seasonal\nautoplot(data_ts.adj) + \n  ggtitle(\"Decomposition of Temperature time-series data without seasonal components\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature\")\n\n\n\n\n\nSimilarly with trend\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$trend\nautoplot(data_ts.adj) +\n  ggtitle(\"Decomposition of Temperature time-series data without trend components\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature variation\")\n\n\n\n\n\nLet’s look at the ACF and PACF plots\n\n ggtsdisplay(difference(data_EDA$AveTemp, 12),\n               plot_type='partial', lag=36) +\n  labs(title=\"Seasonally differenced\", y=\"\")"
  },
  {
    "objectID": "Prototype/Forecast.html#rainfall-time-series-analysis",
    "href": "Prototype/Forecast.html#rainfall-time-series-analysis",
    "title": "Prototype: Time Series Forecasting",
    "section": "3.2 Rainfall time-series analysis",
    "text": "3.2 Rainfall time-series analysis\nLet’s break down the rainfall time-series analysis to look at the seasonal, trend and residual components.\n\n\nShow the code\ndata_ts.ts = ts(data_EDA$Rainfall, frequency = 12)\ndecomposed &lt;- decompose(data_ts.ts)\n\n# Plot the decomposed components\nautoplot(decomposed) +\n  ggtitle(\"Decomposition of the Temperature time-series data\") +\n  xlab(\"Year\")\n\n\n\n\n\nLet’s substract seasonality\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$seasonal\nautoplot(data_ts.adj) + \n  ggtitle(\"Decomposition of Rainfall time-series data without seasonal components\") +\n  xlab(\"Year\") +\n  ylab(\"Rainfall (mm)\")\n\n\n\n\n\nSimilarly with trend\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$trend\nautoplot(data_ts.adj) +\n  ggtitle(\"Decomposition of Rainfall time-series data without trend components\") +\n  xlab(\"Year\") +\n  ylab(\"Rainfall variation (mm)\")\n\n\n\n\n\nLet’s look at the ACF and PACF plots\n\n\nShow the code\n ggtsdisplay(difference(data_EDA$Rainfall, 12),\n               plot_type='partial', lag=36) +\n  labs(title=\"Seasonally differenced\", y=\"\")"
  },
  {
    "objectID": "Prototype/Forecast.html#forecast-using-exponential-smoothing-state-space-model",
    "href": "Prototype/Forecast.html#forecast-using-exponential-smoothing-state-space-model",
    "title": "Prototype: Time Series Forecasting",
    "section": "5.1 Forecast using Exponential smoothing state space model",
    "text": "5.1 Forecast using Exponential smoothing state space model\nUsers can select values for the following:\n\n3 components (Error, Trend, Season),\nthe optimisation criterion\nthe number of forecast years\nthe variable (AveTemp, MaxTemp, MinTemp, TotalRain)\nregion\n\n\n\nShow the code\n#input values:\n# Error can have additive (\"A\") or multiplicative (\"M\")\ninput_error &lt;- \"A\"\n# Trend can have none (\"N\"), additive (\"A\"), damped variants (\"Ad\")\ninput_trend &lt;- \"A\"\n# season can have none (\"N\"), additive (\"A\") or multiplicative (\"M\")\n# note that multiplicative take a long time to generate\ninput_season &lt;- \"A\"\ninput_forecast_years &lt;- 1\n# information criterion to choose the model can be \"aicc\", \"aic\", \"bic\"\n# Akaike Information Criterion (AIC), Bayesian Information Criterion (BIC) and Corrected Akaike Information Criterion (AICc)\n\n#sigma\", \"mae\"  log-likelihood \"lik\", \"mse\" (Mean Square Error), \"amse\" (Average MSE, \"sigma\" (Standard deviation of residuals), or \"mae\" (Mean Absolute Error).\ninput_opt_crit &lt;- \"mae\"\n\n# can be \"North\", \"Central\", \"North-East\", \"East\", \"West\", \"All\"\ninput_region &lt;- \"North\"\n# can be \"MaxTemp\", \"MaxTemp\", \"MinTemp\", \"TotalRainfall\"\ninput_variable &lt;- \"MaxTemp\"\n\n\nif (input_region != \"All\") {\n  data &lt;- data_region_ts %&gt;% \n    filter(Region == input_region) %&gt;% \n    as_tsibble(index = (YearMonth))\n} else {\n  data &lt;-data_ts\n}\n \nif (input_variable == \"Rainfall\"){\n    data &lt;- data %&gt;% rename(Value = Rainfall)\n    displayText = \"Rainfall\"\n    displayUnit = \"mm\"\n} else {\n  if (input_variable == \"MeanTemp\") {\n    data &lt;- data %&gt;% rename(Value = AveTemp)\n  } else if (input_variable == \"MaxTemp\") {\n    data &lt;- data %&gt;% rename(Value = MaxTemp)\n  } else {\n    data &lt;- data %&gt;% rename(Value = MinTemp)\n  }\n  displayText = \"Temperature\"\n  displayUnit = \"°C\"\n}\n\nets_model &lt;- data %&gt;%\n  model(ETS(Value ~ error(input_error) + \n              trend(input_trend) + season(input_season), \n            opt_crit = input_opt_crit)) \n\n#can get the IC and OC values\nets_model %&gt;% glance()\n\n\n# A tibble: 1 × 9\n  .model                      sigma2 log_lik   AIC  AICc   BIC   MSE  AMSE   MAE\n  &lt;chr&gt;                        &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 \"ETS(Value ~ error(input_e…  0.392   -991. 2015. 2017. 2083. 0.376 0.394 0.473\n\n\nShow the code\nforecast_values &lt;- forecast(ets_model, h = input_forecast_years * 12)  \n\nquantiles &lt;- forecast_values %&gt;%\n  group_by(.model) %&gt;%\n  summarise(lower_80 = quantile(Value, 0.1),\n            upper_80 = quantile(Value, 0.9),\n            lower_95 = quantile(Value, 0.025),\n            upper_95 = quantile(Value, 0.975))\n\np &lt;- ggplot() +\n  geom_line(data = data, \n            aes(x = Date, y = Value, color = \"Observed\"), \n            linetype = \"solid\") +\n  geom_line(data = forecast_values, \n            aes(x = as.Date(YearMonth), y = .mean, color = \"Forecast\"), \n            linetype = \"dashed\") +\n  geom_point(data = forecast_values, \n             aes(x = as.Date(YearMonth), y = .mean, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Forecasted:\", round(.mean, 1), displayUnit)),\n            size = 1, color = \"red\") +\n  geom_point(data = data, \n             aes(x = Date, y = Value, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Observed:\", round(Value, 1), displayUnit)),\n             size = 1, color = \"blue\") +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_80, \n                  ymax = upper_80), fill = \"black\", alpha = 0.5) +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_95, \n                  ymax = upper_95), fill = \"gray\", alpha = 0.5) +\n  xlab(\"Year\") +\n  ylab(displayText) +\n  ggtitle(paste(\"Forecast \", displayText)) +\n  scale_color_manual(values = c(\"Observed\" = \"blue\", \"Forecast\" = \"red\")) +\n  theme_minimal()\n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Prototype/Forecast.html#forecast-using-arima",
    "href": "Prototype/Forecast.html#forecast-using-arima",
    "title": "Prototype: Time Series Forecasting",
    "section": "5.2 Forecast using ARIMA",
    "text": "5.2 Forecast using ARIMA\nUsers can select values for the following:\n\n3 components (p, d, q),\nstepwise option (TRUE/FALSE)\nthe number of forecast years\nthe variable (AveTemp, MaxTemp, MinTemp, TotalRain)\nregion\n\n\n\nShow the code\ninput_stepwise &lt;- TRUE\ninput_forecast_years &lt;- 1\n#non seasonal p = [1,5], d=[0,2], q=[0,5]\n#seasonal P=[0,2], D=[0,1], Q=[0,2]\ninput_p &lt;- 2\ninput_d &lt;- 0\ninput_q &lt;- 1\n# can be \"North\", \"Central\", \"North-East\", \"East\", \"West\", \"All\"\ninput_region &lt;- \"North\"\n# can be \"MaxTemp\", \"MaxTemp\", \"MinTemp\", \"TotalRainfall\"\ninput_variable &lt;- \"TotalRainfall\"\n\nif (input_region != \"All\") {\n  data &lt;- data_region_ts %&gt;% \n    filter(Region == input_region) %&gt;% \n    as_tsibble(index = (YearMonth))\n} else {\n  data &lt;-data_ts\n}\n \nif (input_variable == \"Rainfall\"){\n    data &lt;- data %&gt;% rename(Value = Rainfall)\n    displayText = \"Rainfall\"\n    displayUnit = \"mm\"\n} else {\n  if (input_variable == \"MeanTemp\") {\n    data &lt;- data %&gt;% rename(Value = AveTemp)\n  } else if (input_variable == \"MaxTemp\") {\n    data &lt;- data %&gt;% rename(Value = MaxTemp)\n  } else {\n    data &lt;- data %&gt;% rename(Value = MinTemp)\n  }\n  displayText = \"Temperature\"\n  displayUnit = \"°C\"\n}\n\nets_model &lt;- data %&gt;%\n  model(ARIMA(Value ~ pdq(input_p, input_d, input_q), \n              stepwise = input_stepwise))\n\n#can get the IC and OC values\nets_model %&gt;% glance()\n\n\n# A tibble: 1 × 8\n  .model                      sigma2 log_lik   AIC  AICc   BIC ar_roots ma_roots\n  &lt;chr&gt;                        &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt;   &lt;list&gt;  \n1 ARIMA(Value ~ pdq(input_p,…  0.349   -352.  713.  713.  733. &lt;cpl&gt;    &lt;cpl&gt;   \n\n\nShow the code\nforecast_values &lt;- forecast(ets_model, h = input_forecast_years * 12)  \n\nquantiles &lt;- forecast_values %&gt;%\n  group_by(.model) %&gt;%\n  summarise(lower_80 = quantile(Value, 0.1),\n            upper_80 = quantile(Value, 0.9),\n            lower_95 = quantile(Value, 0.025),\n            upper_95 = quantile(Value, 0.975))\n\np &lt;- ggplot() +\n  geom_line(data = data, \n            aes(x = Date, y = Value, color = \"Observed\"), \n            linetype = \"solid\") +\n  geom_line(data = forecast_values, \n            aes(x = as.Date(YearMonth), y = .mean, color = \"Forecast\"), \n            linetype = \"dashed\") +\n  geom_point(data = forecast_values, \n             aes(x = as.Date(YearMonth), y = .mean, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Forecasted:\", round(.mean, 1), displayUnit)),\n            size = 1, color = \"red\") +\n  geom_point(data = data, \n             aes(x = Date, y = Value, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Observed:\", round(Value, 1), displayUnit)),\n             size = 1, color = \"blue\") +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_80, \n                  ymax = upper_80), fill = \"black\", alpha = 0.5) +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_95, \n                  ymax = upper_95), fill = \"gray\", alpha = 0.5) +\n  xlab(\"Year\") +\n  ylab(displayText) +\n  ggtitle(paste(\"Forecast \", displayText)) +\n  scale_color_manual(values = c(\"Observed\" = \"blue\", \"Forecast\" = \"red\")) +\n  theme_minimal()\n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html",
    "href": "Prototype/EDA-GeospatialAnalysis.html",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, tmap, terra, gstat, viridis, automap)"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#prototype",
    "href": "Prototype/EDA-GeospatialAnalysis.html#prototype",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Prototype",
    "text": "Prototype\n\nTemperature\n\n\n\nRainfall"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#temperature-1",
    "href": "Prototype/EDA-GeospatialAnalysis.html#temperature-1",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Temperature",
    "text": "Temperature\n\nprettybclustequalfisherjenkskmeansquantile\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"pretty\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Weather Measurements from MSS\", \n             position = c(\"left\", \"bottom\"))+\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"bclust\") +\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"equal\") +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"fisher\") +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"jenks\") +\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"jenks\") +\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\")\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"MeanTemp\", \n              palette = \"Oranges\", \n              style = \"jenks\") +\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#rainfall-1",
    "href": "Prototype/EDA-GeospatialAnalysis.html#rainfall-1",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Rainfall",
    "text": "Rainfall\n\ntmap_mode(\"view\")\n\ntm_shape(rainfallmpsz) +\n  tm_polygons(col = \"TotalRainfall\", \n              palette = \"Blues\", \n              style = \"jenks\") +\n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,12))"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#transformation-to-shiny-app",
    "href": "Prototype/EDA-GeospatialAnalysis.html#transformation-to-shiny-app",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Transformation to Shiny App",
    "text": "Transformation to Shiny App\nUI\n\nui &lt;- fluidPage(\n  titlePanel(\"Adjustable Style Parameters\"),\n  \n  # Sidebar layout\n  sidebarLayout(\n    sidebarPanel(\n      # Input for selecting style parameter\n      selectInput(\"style_param\", label = \"Select Style Parameter:\",\n                  choices = c(\"jenks\", \"pretty\", \"bclust\", \"equal\", \"fisher\", \"kmeans\", \"quantile\"),\n                  selected = \"jenks\"),\n      # Input for selecting variable (Temperature or Rainfall)\n      selectInput(\"variable_param\", label = \"Select Variable:\",\n                  choices = c(\"Temperature\", \"Rainfall\"),\n                  selected = \"Temperature\")\n    ),\n    \n    # Main panel to display the plot\n    mainPanel(\n      plotOutput(\"style_plot\")\n    )\n  )\n)\n\nServer\n\nserver &lt;- function(input, output) {\n  \n  # Reactive expression to create the map based on selected style parameter and variable\n  output$style_plot &lt;- renderPlot({\n    tmap_mode(\"view\")\n    tmap_options(check.and.fix = TRUE)\n    \n    if (input$variable_param == \"Temperature\") {\n      tm &lt;- tm_shape(mpsztemp) +\n        tm_polygons(col = \"MeanTemp\", palette = \"Oranges\", style = input$style_param) +\n        tm_view(set.zoom.limits = c(11, 12))\n    } else if (input$variable_param == \"Rainfall\") {\n      tm &lt;- tm_shape(rainfallmpsz) +\n        tm_polygons(col = \"TotalRainfall\", palette = \"Blues\", style = input$style_param) +\n        tm_view(set.zoom.limits = c(11, 12))\n    }\n    \n    print(tm)\n  })\n}"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#temperature-2",
    "href": "Prototype/EDA-GeospatialAnalysis.html#temperature-2",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Temperature",
    "text": "Temperature\n\nres1 &lt;- gstat(formula = MeanTemp ~ 1, \n             locations = tpdata_sf, \n             nmax = 5,\n             set = list(idp = 0))\n\n\nresp1 &lt;- predict(res1, coop)\n\n[inverse distance weighted interpolation]\n\nglimpse(resp1)\n\nRows: 314,019\nColumns: 3\n$ var1.pred &lt;dbl&gt; 27.32, 27.32, 27.32, 27.32, 27.32, 27.32, 27.32, 27.32, 27.3…\n$ var1.var  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ geometry  &lt;POINT [m]&gt; POINT (25883.42 50231.33), POINT (25933.4 50231.33), P…\n\n\n\nresp1$x &lt;- st_coordinates(resp1)[,1]\nresp1$y &lt;- st_coordinates(resp1)[,2]\nresp1$pred &lt;- resp1$var1.pred\n\npred1 &lt;- terra::rasterize(resp1, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred1) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\n\nv1 &lt;- variogram(MeanTemp ~ 1, \n               data = tpdata_sf)\nplot(v1)\n\n\n\n\nChange the Variogram Model: Try using a different variogram model that can handle zero-distance semivariances more effectively. Common variogram models include Spherical (Sph), Exponential (Exp), Gaussian (Gau), and Linear (Lin). Experiment with different models to see which one fits your data better. Adjust Parameters: Instead of specifying a range of 5000, which is quite large, consider reducing the range parameter to a more reasonable value based on the spatial characteristics of your data. Similarly, adjust the nugget parameter to a suitable value that reflects the measurement error or variability at very short distances. Try Different Fit Methods: If changing the variogram model and adjusting parameters does not resolve the issue, you can try using a different fit method (fit.method). The error message suggests that fit.method 7 is not suitable for zero-distance semivariances. You can experiment with other fit methods such as 1, 2, 3, etc., to see if they provide a better fit for your data.\n\nfv1 &lt;- fit.variogram(object = v1, \n                    model = vgm(psill = 0.5, model = \"Exp\", range = 1000, nugget = 0.1),\n                    fit.method = 1)  \nfv1\n\n  model     psill    range\n1   Nug 0.4799420    0.000\n2   Exp 0.2375349 2917.264\n\n\n\nplot(v1, fv1)\n\n\n\n\n\nk1 &lt;- gstat(formula = MeanTemp ~ 1, \n           data = tpdata_sf, \n           model = fv1)\nk1\n\ndata:\nvar1 : formula = MeanTemp`~`1 ; data dim = 3715 x 2\nvariograms:\n        model     psill    range\nvar1[1]   Nug 0.4799420    0.000\nvar1[2]   Exp 0.2375349 2917.264\n\n\n\nkpred1 &lt;- terra::rasterize(resp1, grid, \n                           field = \"pred\")\nkpred1\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(kpred1) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\",\n            title = \"Total Mean Temperature\") +\n  tm_layout(main.title = \"Distribution of Mean Temperature\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#rainfall-2",
    "href": "Prototype/EDA-GeospatialAnalysis.html#rainfall-2",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Rainfall",
    "text": "Rainfall\n\nres2 &lt;- gstat(formula = TotalRainfall ~ 1, \n             locations = rfdata_sf, \n             nmax = 5,\n             set = list(idp = 0))\n\n\nresp2 &lt;- predict(res2, coop)\n\n[inverse distance weighted interpolation]\n\nglimpse(resp2)\n\nRows: 314,019\nColumns: 3\n$ var1.pred &lt;dbl&gt; 170.24, 170.24, 170.24, 170.24, 170.24, 170.24, 170.24, 170.…\n$ var1.var  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ geometry  &lt;POINT [m]&gt; POINT (25883.42 50231.33), POINT (25933.4 50231.33), P…\n\n\n\nresp2$x &lt;- st_coordinates(resp2)[,1]\nresp2$y &lt;- st_coordinates(resp2)[,2]\nresp2$pred &lt;- resp2$var1.pred\n\npred2 &lt;- terra::rasterize(resp2, grid, \n                          field = \"pred\", \n                          fun = \"mean\")\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred2) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")"
  },
  {
    "objectID": "Prototype/EDA-GeospatialAnalysis.html#transformation-to-shiny-app-1",
    "href": "Prototype/EDA-GeospatialAnalysis.html#transformation-to-shiny-app-1",
    "title": "Prototype - EDA Geospatial Analysis",
    "section": "Transformation to Shiny App",
    "text": "Transformation to Shiny App\nUI\n\nui &lt;- fluidPage(\n  titlePanel(\"Adjustable Geostatistical Analysis Parameters\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Input for number of neighbors\n      sliderInput(\"n_neighbors\", \"Number of Neighbors:\",\n                  min = 0, max = 20, value = 5),\n      # Input for model options\n      selectInput(\"model_option\", \"Model Options:\",\n                  choices = c(\"Sph\", \"Exp\", \"Gau\", \"Lin\"),\n                  selected = \"Sph\"),\n      # Input for range\n      sliderInput(\"range_param\", \"Range:\",\n                  min = 1000, max = 5000, step = 1000, value = 5000),\n      # Input for fit methods\n      selectInput(\"fit_method\", \"Fit Methods:\",\n                  choices = c(1, 2, 3, 4),\n                  selected = 1)\n    ),\n    \n    mainPanel(\n      # Placeholder for plot\n      plotOutput(\"geo_plot\")\n    )\n  )\n)\n\nServer\n\nserver &lt;- function(input, output) {\n  \n  # Reactive expression for geostatistical analysis\n  output$geo_plot &lt;- renderPlot({\n    \n    # Create grid\n    grid &lt;- terra::rast(mpsz, nrows = 690, ncols = 1075)\n    \n    # Extract xy coordinates\n    xy &lt;- terra::xyFromCell(grid, 1:ncell(grid))\n    coop &lt;- st_as_sf(as.data.frame(xy), coords = c(\"x\", \"y\"))\n    coop &lt;- st_filter(coop, mpsz)\n    \n    # Perform geostatistical analysis for Temperature\n    if (input$model_option == \"Sph\") {\n      model &lt;- \"Spherical\"\n    } else if (input$model_option == \"Exp\") {\n      model &lt;- \"Exponential\"\n    } else if (input$model_option == \"Gau\") {\n      model &lt;- \"Gaussian\"\n    } else {\n      model &lt;- \"Linear\"\n    }\n    \n    res &lt;- gstat(formula = MeanTemp ~ 1, \n                 locations = tpdata_sf, \n                 nmax = input$n_neighbors,\n                 set = list(idp = 0),\n                 model = vgm(psill = 0.5, model = model, range = input$range_param, nugget = 0.1),\n                 fit.method = input$fit_method)\n    \n    resp &lt;- predict(res, coop)\n    \n    resp$x &lt;- st_coordinates(resp)[, 1]\n    resp$y &lt;- st_coordinates(resp)[, 2]\n    resp$pred &lt;- resp$var1.pred\n    \n    pred &lt;- terra::rasterize(resp, grid, \n                             field = \"pred\", \n                             fun = \"mean\")\n    \n    # Plot the result\n    tmap_options(check.and.fix = TRUE)\n    tmap_mode(\"plot\")\n    tm_shape(pred1) + \n      tm_raster(alpha = 0.6, palette = \"viridis\") +\n      tm_layout(main.title = \"Distribution of Mean Temperature\",\n                main.title.position = \"center\",\n                main.title.size = 1.2,\n                legend.height = 0.45, \n                legend.width = 0.35,\n                frame = TRUE) +\n      tm_compass(type = \"8star\", size = 2) +\n      tm_scale_bar() +\n      tm_grid(alpha = 0.2)\n  })\n}"
  },
  {
    "objectID": "Prototype/CDA.html",
    "href": "Prototype/CDA.html",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "",
    "text": "We will load the following R packages for this exercise:\n\npacman::p_load(tidyverse, ggstatsplot, ExPanDaR)"
  },
  {
    "objectID": "Prototype/CDA.html#comparing-temperature-without-functions",
    "href": "Prototype/CDA.html#comparing-temperature-without-functions",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "4.1. Comparing Temperature Without Functions",
    "text": "4.1. Comparing Temperature Without Functions\nFirst, we create a static plot without functions to visualise the output.\n\nggbetweenstats(data = temp_annual,\n               x = Station, \n               y = Avg_Max_Temp,\n               plot.type = \"boxviolin\",\n               type = \"nonparametric\",\n               pairwise.display = \"non-significant\",\n               messages = FALSE)\n\n\n\n\n\nggbetweenstats(data = temp_monthly,\n               x = Region, \n               y = Avg_Max_Temp,\n               plot.type = \"boxviolin\",\n               type = \"nonparametric\",\n               pairwise.display = \"non-significant\",\n               messages = FALSE)"
  },
  {
    "objectID": "Prototype/CDA.html#comparing-rainfall-without-functions",
    "href": "Prototype/CDA.html#comparing-rainfall-without-functions",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "4.3. Comparing Rainfall Without Functions",
    "text": "4.3. Comparing Rainfall Without Functions\n\nggbetweenstats(data = rf_annual,\n               x = Station, \n               y = Avg_Total_Rf,\n               plot.type = \"boxviolin\",\n               type = \"nonparametric\",\n               pairwise.display = \"non-significant\",\n               messages = FALSE)\n\n\n\n\n\nggbetweenstats(data = rf_monthly,\n               x = Region, \n               y = Min_Total_Rf,\n               plot.type = \"boxviolin\",\n               type = \"nonparametric\",\n               pairwise.display = \"non-significant\",\n               messages = FALSE)\n\n\n\n\n\n\n\n\n\n\nUI Considerations\n\n\n\nWith the Shiny app in mind, some parameters that can allow user-input in this plot include:\n\nplot.type: accepts boxviolin, box, violin\ntype: accepts nonparametric, parametric, robust, bayes\npairwise.display = accepts significant, non-significant, everything, all"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---annual-temperature-by-station",
    "href": "Prototype/CDA.html#create-function---annual-temperature-by-station",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "5.1. Create Function - Annual Temperature by Station",
    "text": "5.1. Create Function - Annual Temperature by Station\nFrom the plots above, it is difficult to compare the chosen metric of all stations at once. Due to the number of stations available, each plot becomes very small and much of the details are lost. We will now attempt to create a function to display only the top3 stations by average annual temperature recorded.\n\ntemp_annual_sorted &lt;-  temp_annual %&gt;%\n  arrange(desc(Avg_Mean_Temp))\n\ntop3 &lt;- temp_annual_sorted$Station[1:3]\n\n\nAnnual_Top3_Temp_Station &lt;- function(metric = \"Avg_Mean_Temp\", \n                                selected_station,\n                                p_type = \"boxviolin\",\n                                t_type = \"nonparametric\",\n                                pair_disp = \"non-significant\",\n                                pair.comp = T,\n                                conf = 0.95,\n                                nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Mean_Temp\" ~ \"Average Mean Temperature\",\n                           metric == \"Avg_Max_Temp\" ~ \"Average of Max Temperature\",\n                           metric == \"Avg_Min_Temp\" ~ \"Average of Minimum Temperature\",\n                           metric == \"Max_Temp\" ~ \"Maximum Temperature\",\n                           metric == \"Min_Temp\" ~ \"Minimum Temperature\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  temp_annual_anova &lt;- temp_annual %&gt;%\n    filter(Station %in% selected_station) %&gt;%\n    mutate(Station = fct_reorder(Station, !!sym(metric), .desc = TRUE))\n  \n  if(nooutliers == T){\n  temp_annual_anova &lt;- temp_annual_anova %&gt;%\n      treat_outliers() \n  }\n  \n  temp_annual_anova %&gt;%\n    ggbetweenstats(x = Station,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Station\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nAnnual_Top3_Temp_Station(metric = \"Avg_Mean_Temp\", \n                         selected_station = top3,\n                         p_type = \"boxviolin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Top3_Temp_Station(metric = \"Max_Temp\", \n                         selected_station = top3,\n                         p_type = \"box\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Top3_Temp_Station(metric = \"Avg_Min_Temp\", \n                         selected_station = top3,\n                         p_type = \"violin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.99,\n                         nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---annual-temperature-by-region",
    "href": "Prototype/CDA.html#create-function---annual-temperature-by-region",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "5.2. Create Function - Annual temperature by Region",
    "text": "5.2. Create Function - Annual temperature by Region\n\nAnnual_Temp_Region &lt;- function(metric = \"Avg_Mean_Temp\", \n                               p_type = \"boxviolin\",\n                               t_type = \"nonparametric\",\n                               pair_disp = \"non-significant\",\n                               pair.comp = T,\n                               conf = 0.95,\n                               nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Mean_Temp\" ~ \"Average Mean Temperature\",\n                           metric == \"Avg_Max_Temp\" ~ \"Average of Max Temperature\",\n                           metric == \"Avg_Min_Temp\" ~ \"Average of Minimum Temperature\",\n                           metric == \"Max_Temp\" ~ \"Maximum Temperature\",\n                           metric == \"Min_Temp\" ~ \"Minimum Temperature\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  if(nooutliers == T){\n  temp_annual &lt;- temp_annual %&gt;%\n      treat_outliers() \n  }\n  \n  temp_annual %&gt;%\n    ggbetweenstats(x = Region,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Region\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nAnnual_Temp_Region(metric = \"Avg_Mean_Temp\", \n                   p_type = \"boxviolin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.95,\n                   nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Temp_Region(metric = \"Max_Temp\",\n                   p_type = \"box\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.95,\n                   nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Temp_Region(metric = \"Avg_Min_Temp\", \n                   p_type = \"violin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.99,\n                   nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---monthly-temperature-by-station",
    "href": "Prototype/CDA.html#create-function---monthly-temperature-by-station",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "6.1. Create Function - Monthly temperature by Station",
    "text": "6.1. Create Function - Monthly temperature by Station\n\ntemp_monthly_sorted &lt;-  temp_monthly %&gt;%\n  arrange(desc(Avg_Mean_Temp))\n\ntop3 &lt;- temp_monthly_sorted$Station[1:3]\n\n\nMonthly_Top3_Temp_Station &lt;- function(metric = \"Avg_Mean_Temp\", \n                                      selected_station,\n                                      p_type = \"boxviolin\",\n                                      t_type = \"nonparametric\",\n                                      pair_disp = \"non-significant\",\n                                      pair.comp = T,\n                                      conf = 0.95,\n                                      nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Mean_Temp\" ~ \"Average Mean Temperature\",\n                           metric == \"Avg_Max_Temp\" ~ \"Average of Max Temperature\",\n                           metric == \"Avg_Min_Temp\" ~ \"Average of Minimum Temperature\",\n                           metric == \"Max_Temp\" ~ \"Maximum Temperature\",\n                           metric == \"Min_Temp\" ~ \"Minimum Temperature\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  temp_monthly_anova &lt;- temp_monthly %&gt;%\n    filter(Station %in% selected_station) %&gt;%\n    mutate(Station = fct_reorder(Station, !!sym(metric), .desc = TRUE))\n  \n  if(nooutliers == T){\n  temp_monthly_anova &lt;- temp_monthly_anova %&gt;%\n      treat_outliers() \n  }\n  \n  temp_monthly_anova %&gt;%\n    ggbetweenstats(x = Station,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Station\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nMonthly_Top3_Temp_Station(metric = \"Avg_Mean_Temp\", \n                          selected_station = top3,\n                          p_type = \"boxviolin\",\n                          t_type = \"nonparametric\",\n                          pair_disp = \"non-significant\",\n                          pair.comp = T,\n                          conf = 0.95,\n                          nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Top3_Temp_Station(metric = \"Max_Temp\", \n                          selected_station = top3,\n                          p_type = \"box\",\n                          t_type = \"nonparametric\",\n                          pair_disp = \"non-significant\",\n                          pair.comp = T,\n                          conf = 0.95,\n                          nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Top3_Temp_Station(metric = \"Avg_Min_Temp\", \n                          selected_station = top3,\n                          p_type = \"violin\",\n                          t_type = \"nonparametric\",\n                          pair_disp = \"non-significant\",\n                          pair.comp = T,\n                          conf = 0.99,\n                          nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---monthly-temperature-by-region",
    "href": "Prototype/CDA.html#create-function---monthly-temperature-by-region",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "6.2. Create Function - Monthly temperature by Region",
    "text": "6.2. Create Function - Monthly temperature by Region\n\nMonthly_Temp_Region &lt;- function(metric = \"Avg_Mean_Temp\", \n                                p_type = \"boxviolin\",\n                                t_type = \"nonparametric\",\n                                pair_disp = \"non-significant\",\n                                pair.comp = T,\n                                conf = 0.95,\n                                nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Mean_Temp\" ~ \"Average Mean Temperature\",\n                           metric == \"Avg_Max_Temp\" ~ \"Average of Max Temperature\",\n                           metric == \"Avg_Min_Temp\" ~ \"Average of Minimum Temperature\",\n                           metric == \"Max_Temp\" ~ \"Maximum Temperature\",\n                           metric == \"Min_Temp\" ~ \"Minimum Temperature\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  if(nooutliers == T){\n  temp_monthly &lt;- temp_monthly %&gt;%\n      treat_outliers() \n  }\n  \n  temp_monthly %&gt;%\n    ggbetweenstats(x = Region,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Region\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nMonthly_Temp_Region(metric = \"Avg_Mean_Temp\", \n                    p_type = \"boxviolin\",\n                    t_type = \"nonparametric\",\n                    pair_disp = \"non-significant\",\n                    pair.comp = T,\n                    conf = 0.95,\n                   nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Temp_Region(metric = \"Max_Temp\",\n                    p_type = \"box\",\n                    t_type = \"nonparametric\",\n                    pair_disp = \"non-significant\",\n                    pair.comp = T,\n                    conf = 0.95,\n                    nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Temp_Region(metric = \"Avg_Min_Temp\", \n                    p_type = \"violin\",\n                    t_type = \"nonparametric\",\n                    pair_disp = \"non-significant\",\n                    pair.comp = T,\n                    conf = 0.99,\n                    nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---annual-rainfall-by-station",
    "href": "Prototype/CDA.html#create-function---annual-rainfall-by-station",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "7.1. Create Function - Annual Rainfall by Station",
    "text": "7.1. Create Function - Annual Rainfall by Station\n\nrf_annual_sorted &lt;-  rf_annual %&gt;%\n  arrange(desc(Avg_Total_Rf))\n\ntop3 &lt;- rf_annual_sorted$Station[1:3]\n\n\nAnnual_Top3_Rf_Station &lt;- function(metric = \"Avg_Total_Rf\", \n                                selected_station,\n                                p_type = \"boxviolin\",\n                                t_type = \"nonparametric\",\n                                pair_disp = \"non-significant\",\n                                pair.comp = T,\n                                conf = 0.95,\n                                nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Total_Rf\" ~ \"Average Total Rainfall\",\n                           metric == \"Avg_Total_Rf30\" ~ \"Average of Total Rainfall in 30 min\",\n                           metric == \"Avg_Total_Rf60\" ~ \"Average of Total Rainfall in 60 min\",\n                           metric == \"Avg_Total_Rf120\" ~ \"Average of Total Rainfall in 120 min\",\n                           metric == \"Max_Total_Rf\" ~ \"Maximum Total Rainfall\",\n                           metric == \"Min_Total_Rf\" ~ \"Minimum Total Rainfall\",\n                           TRUE ~ metric)\n\n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  rf_annual_anova &lt;- rf_annual %&gt;%\n    filter(Station %in% selected_station) %&gt;%\n    mutate(Station = fct_reorder(Station, !!sym(metric), .desc = TRUE))\n  \n  if(nooutliers == T){\n  rf_annual_anova &lt;- rf_annual_anova %&gt;%\n      treat_outliers() \n  }\n  \n  rf_annual_anova %&gt;%\n    ggbetweenstats(x = Station,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Station\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nAnnual_Top3_Rf_Station(metric = \"Avg_Total_Rf\", \n                         selected_station = top3,\n                         p_type = \"boxviolin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Top3_Rf_Station(metric = \"Avg_Total_Rf60\", \n                         selected_station = top3,\n                         p_type = \"box\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Top3_Rf_Station(metric = \"Max_Total_Rf\", \n                         selected_station = top3,\n                         p_type = \"violin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.99,\n                         nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---annual-rainfall-by-region",
    "href": "Prototype/CDA.html#create-function---annual-rainfall-by-region",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "7.2. Create Function - Annual Rainfall by Region",
    "text": "7.2. Create Function - Annual Rainfall by Region\n\nAnnual_Rf_Region &lt;- function(metric = \"Avg_Total_Rf\", \n                               p_type = \"boxviolin\",\n                               t_type = \"nonparametric\",\n                               pair_disp = \"non-significant\",\n                               pair.comp = T,\n                               conf = 0.95,\n                               nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Total_Rf\" ~ \"Average Total Rainfall\",\n                           metric == \"Avg_Total_Rf30\" ~ \"Average of Total Rainfall in 30 min\",\n                           metric == \"Avg_Total_Rf60\" ~ \"Average of Total Rainfall in 60 min\",\n                           metric == \"Avg_Total_Rf120\" ~ \"Average of Total Rainfall in 120 min\",\n                           metric == \"Max_Total_Rf\" ~ \"Maximum Total Rainfall\",\n                           metric == \"Min_Total_Rf\" ~ \"Minimum Total Rainfall\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  if(nooutliers == T){\n  rf_annual &lt;- rf_annual %&gt;%\n      treat_outliers() \n  }\n  \n  rf_annual %&gt;%\n    ggbetweenstats(x = Region,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Region\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nAnnual_Rf_Region(metric = \"Avg_Total_Rf\", \n                   p_type = \"violin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.99,\n                   nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Rf_Region(metric = \"Avg_Total_Rf60\",\n                   p_type = \"box\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.95,\n                   nooutliers = T)\n\n\n\n\n\n\n\nAnnual_Rf_Region(metric = \"Max_Total_Rf\", \n                   p_type = \"violin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.99,\n                   nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---monthly-rainfall-by-station",
    "href": "Prototype/CDA.html#create-function---monthly-rainfall-by-station",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "8.1. Create Function - Monthly Rainfall by Station",
    "text": "8.1. Create Function - Monthly Rainfall by Station\n\nrf_monthly_sorted &lt;-  rf_monthly %&gt;%\n  arrange(desc(Avg_Total_Rf))\n\ntop3 &lt;- rf_monthly_sorted$Station[1:3]\n\n\nMonthly_Rf_Station &lt;- function(metric = \"Avg_Total_Rf\", \n                                selected_station,\n                                p_type = \"boxviolin\",\n                                t_type = \"nonparametric\",\n                                pair_disp = \"non-significant\",\n                                pair.comp = T,\n                                conf = 0.95,\n                                nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Total_Rf\" ~ \"Average Total Rainfall\",\n                           metric == \"Avg_Total_Rf30\" ~ \"Average of Total Rainfall in 30 min\",\n                           metric == \"Avg_Total_Rf60\" ~ \"Average of Total Rainfall in 60 min\",\n                           metric == \"Avg_Total_Rf120\" ~ \"Average of Total Rainfall in 120 min\",\n                           metric == \"Max_Total_Rf\" ~ \"Maximum Total Rainfall\",\n                           metric == \"Min_Total_Rf\" ~ \"Minimum Total Rainfall\",\n                           TRUE ~ metric)\n\n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  rf_monthly_anova &lt;- rf_monthly %&gt;%\n    filter(Station %in% selected_station) %&gt;%\n    mutate(Station = fct_reorder(Station, !!sym(metric), .desc = TRUE))\n  \n  if(nooutliers == T){\n  rf_monthly_anova &lt;- rf_monthly_anova %&gt;%\n      treat_outliers() \n  }\n  \n  rf_monthly_anova %&gt;%\n    ggbetweenstats(x = Station,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Station\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nMonthly_Rf_Station(metric = \"Avg_Total_Rf\", \n                         selected_station = top3,\n                         p_type = \"boxviolin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Rf_Station(metric = \"Avg_Total_Rf60\", \n                         selected_station = top3,\n                         p_type = \"box\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.95,\n                         nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Rf_Station(metric = \"Max_Total_Rf\", \n                         selected_station = top3,\n                         p_type = \"violin\",\n                         t_type = \"nonparametric\",\n                         pair_disp = \"non-significant\",\n                         pair.comp = T,\n                         conf = 0.99,\n                         nooutliers = T)"
  },
  {
    "objectID": "Prototype/CDA.html#create-function---monthly-rainfall-by-region",
    "href": "Prototype/CDA.html#create-function---monthly-rainfall-by-region",
    "title": "Prototype - Confirmatory Data Analysis",
    "section": "8.2. Create Function - Monthly Rainfall by Region",
    "text": "8.2. Create Function - Monthly Rainfall by Region\n\nMonthly_Rf_Region &lt;- function(metric = \"Avg_Total_Rf\", \n                               p_type = \"boxviolin\",\n                               t_type = \"nonparametric\",\n                               pair_disp = \"non-significant\",\n                               pair.comp = T,\n                               conf = 0.95,\n                               nooutliers = T){\n  \n  metric_label = case_when(metric == \"Avg_Total_Rf\" ~ \"Average Total Rainfall\",\n                           metric == \"Avg_Total_Rf30\" ~ \"Average of Total Rainfall in 30 min\",\n                           metric == \"Avg_Total_Rf60\" ~ \"Average of Total Rainfall in 60 min\",\n                           metric == \"Avg_Total_Rf120\" ~ \"Average of Total Rainfall in 120 min\",\n                           metric == \"Max_Total_Rf\" ~ \"Maximum Total Rainfall\",\n                           metric == \"Min_Total_Rf\" ~ \"Minimum Total Rainfall\",\n                           TRUE ~ metric)\n  \n  test_label = case_when(t_type == \"parametric\" ~ \"Mean (Parametric)\",\n                         t_type == \"nonparametric\" ~ \"Median (Non-Parametric)\",\n                         t_type == \"robust\" ~ \"Mean (Robust t-test)\",\n                         t_type == \"bayes\" ~ \"Mean (Bayesian)\",)\n  \n  if(nooutliers == T){\n  rf_monthly &lt;- rf_monthly %&gt;%\n      treat_outliers() \n  }\n  \n  rf_monthly %&gt;%\n    ggbetweenstats(x = Region,\n                   y = !!sym(metric),\n                   plot.type = p_type,\n                   type = t_type,\n                   pairwise.comparisons = T,\n                   pairwise.display = pair_disp,\n                   mean.ci = T, \n                   p.adjust.method = \"fdr\",\n                   conf.level = conf,\n                   xlab = \"Region\", ylab = metric_label,)\n}\n\n\nTest 1Test 2Test 3\n\n\n\nMonthly_Rf_Region(metric = \"Avg_Total_Rf\", \n                   p_type = \"violin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.99,\n                   nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Rf_Region(metric = \"Avg_Total_Rf60\",\n                   p_type = \"box\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.95,\n                   nooutliers = T)\n\n\n\n\n\n\n\nMonthly_Rf_Region(metric = \"Max_Total_Rf\", \n                   p_type = \"violin\",\n                   t_type = \"nonparametric\",\n                   pair_disp = \"non-significant\",\n                   pair.comp = T,\n                   conf = 0.99,\n                   nooutliers = T)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The heat is on!  Singapore’s Race Against Climate Change",
    "section": "",
    "text": "Join us in our journey to analyse the weather conditions in Singapore and predict the weather in the next few years."
  },
  {
    "objectID": "EDA/EDA-Rainfall.html",
    "href": "EDA/EDA-Rainfall.html",
    "title": "Exploratory Data Analysis - Rainfall",
    "section": "",
    "text": "pacman::p_load(tidyverse, readr, psych, st, stars, tmap, sf,\n               ggstatsplot, plotly, ggplot2, ggdist, dplyr, ggiraph)"
  },
  {
    "objectID": "EDA/EDA-Rainfall.html#analyse-rainfall-using-maps",
    "href": "EDA/EDA-Rainfall.html#analyse-rainfall-using-maps",
    "title": "Exploratory Data Analysis - Rainfall",
    "section": "4.1 Analyse rainfall using maps",
    "text": "4.1 Analyse rainfall using maps\nLet’s map the station to the planning area (PA).\n\n\nShow the code\nstation_to_PA &lt;- c(\n  \"Admiralty\" = \"WOODLANDS\",\n  \"Ang Mo Kio\" = \"ANG MO KIO\",\n  \"Boon Lay (East)\" = \"BOON LAY\",\n  \"Changi\" = \"CHANGI\",\n  \"Choa Chu Kang (South)\" = \"CHOA CHU KANG\",\n  \"Clementi\" = \"CLEMENTI\",\n  \"East Coast Parkway\" = \"BEDOK\",\n  \"Jurong (West)\" = \"JURONG WEST\",\n  \"Khatib\" = \"YISHUN\",\n  \"Marina Barrage\" = \"DOWNTOWN CORE\",\n  \"Newton\" = \"NEWTON\",\n  \"Pasir Panjang\" = \"PASIR PANJANG\",\n  \"Paya Lebar\" = \"PAYA LEBAR\",\n  \"Seletar\" = \"SELETAR\",\n  \"Sembawang\" = \"SEMBAWANG\",\n  \"Tai Seng\" = \"HOUGANG\",\n  \"Tengah\" = \"TENGAH\",\n  \"Tuas South\" = \"TUAS\"\n)\n\nrainfall$PA &lt;- station_to_PA[rainfall$Station]\nrainfall &lt;- rainfall[, c(\"PA\", setdiff(names(rainfall), \"PA\"))]\nhead(rainfall)\n\n\n# A tibble: 6 × 10\n  PA        Station  Region  Year Month Date       TotalRainfall TotalRainfall30\n  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;ord&gt; &lt;date&gt;             &lt;dbl&gt;           &lt;dbl&gt;\n1 WOODLANDS Admiral… North   2009 Jan   2009-01-01           0.8               0\n2 WOODLANDS Admiral… North   2009 Feb   2009-02-01         148                 0\n3 WOODLANDS Admiral… North   2009 Mar   2009-03-01         348                 0\n4 WOODLANDS Admiral… North   2009 Apr   2009-04-01         149.                0\n5 WOODLANDS Admiral… North   2009 May   2009-05-01         206.                0\n6 WOODLANDS Admiral… North   2009 Jun   2009-06-01          92                 0\n# ℹ 2 more variables: TotalRainfall60 &lt;dbl&gt;, TotalRainfall120 &lt;dbl&gt;\n\n\n\nrain_map &lt;- rainfall %&gt;% \n  group_by(PA, Station, Year) %&gt;% \n  summarise(Annual_Rainfall = \n              sum(TotalRainfall, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nglimpse(rain_map)\n\nRows: 469\nColumns: 4\n$ PA              &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\"…\n$ Station         &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\"…\n$ Year            &lt;dbl&gt; 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, …\n$ Annual_Rainfall &lt;dbl&gt; 830.6, 2849.2, 3050.4, 2579.6, 3240.0, 1961.4, 2018.4,…\n\n\n\nmpsztemp &lt;- left_join(mpsz, rain_map,\n                         by = c(\"PLN_AREA_N\" = \"PA\"))\nglimpse(mpsztemp)\n\nRows: 3,485\nColumns: 10\n$ SUBZONE_N       &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"…\n$ SUBZONE_C       &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPS…\n$ PLN_AREA_N      &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WES…\n$ PLN_AREA_C      &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", …\n$ REGION_N        &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", …\n$ REGION_C        &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", …\n$ Station         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Marina Ba…\n$ Year            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2010, 2011…\n$ Annual_Rainfall &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1112.0, 23…\n$ geometry        &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLY…\n\n\nLet’s plot the annual mean temperature distribution across Singapore.\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"Annual_Rainfall\", \n              palette = \"Blues\", \n              style = \"jenks\") +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt seems like the western area of Singapore has more rainfall."
  },
  {
    "objectID": "EDA/EDA-Rainfall.html#rainfall-time-series",
    "href": "EDA/EDA-Rainfall.html#rainfall-time-series",
    "title": "Exploratory Data Analysis - Rainfall",
    "section": "4.2 Rainfall Time Series",
    "text": "4.2 Rainfall Time Series\n\n4.2.1 Overall - Rainfall Time Series\n\n\nShow the code\ngg &lt;- ggplot(rainfall, aes(x = Date, y = TotalRainfall, \n                         color = factor(Year))) +\n    geom_line(linewidth = 0.1) +\n    geom_point(aes(text = paste0(\"Month:\", Month, \n                                \"&lt;br&gt;Total Rainfall:\", TotalRainfall, \"mm\"))) +\n    labs(x = \"Year\", y = \"Monthly Total Rainfall (mm)\", color = \"Year\",\n         title = \"Trend of Monthly Total Rainfall from 1981 to 2023\", \n         caption = \"Data from Meteorological Service Singapore website\") +\n    geom_smooth(method = \"lm\", \n                se = FALSE, color = \"black\") +\n    theme_minimal() \n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text = \n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\", \n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")),\n           showlegend = FALSE,\n    annotations = list(text = gg$labels$caption,\n                      xref = \"paper\", yref = \"paper\",\n                      x = 1000, y = 24,\n                      xanchor = \"right\", yanchor = \"top\",\n                      showarrow = FALSE)) \n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that the trend of rainfall is constant horizontal line, means the rainfall over the years are similar.\n\n\n\n\n4.2.2 Rainfall Time Series by station\n\n\nShow the code\nrain_station &lt;- rainfall %&gt;%\n  group_by(Station, Year) %&gt;%\n  summarise(rain = sum(TotalRainfall, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nrain_station$mean_tooltip &lt;- c(paste0(\n  \"Year: \", rain_station$Year,\n  \"\\n Station: \", rain_station$Station,\n  \"\\n Total Rainfall: \", rain_station$rain, \"mm\"))\n\nline &lt;- ggplot(data = rain_station,\n               aes(x = Year,\n                   y = rain,\n                   group = Station,\n                   color = Station,\n                   data_id = Station)) +\n  geom_line_interactive(size = 1.2,\n                        alpha = 0.4) +\n  geom_point_interactive(aes(tooltip = rain_station$mean_tooltip),\n                         fill = \"white\",\n                         size = 1,\n                         stroke = 1,\n                         shape = 21) +\n  theme_classic() +\n  ylab(\"Annual Total Rainfall(mm)\") +\n  xlab(\"Year\") +\n  ggtitle(\"Annual Total Rainfall\") +\n  theme(plot.title = element_text(size = 10),\n        plot.subtitle = element_text(size = 8)) \n\ngirafe(ggobj = line, \n       width_svg = 8,\n       height_svg = 6 * 0.618,\n       options = list(\n         opts_hover(css = \"stroke-width: 2.5; opacity: 1;\"),\n         opts_hover_inv(css = \"stroke-width: 1;opacity:0.6;\")))"
  },
  {
    "objectID": "EDA/EDA-Rainfall.html#confidence-interval-of-total-rainfall",
    "href": "EDA/EDA-Rainfall.html#confidence-interval-of-total-rainfall",
    "title": "Exploratory Data Analysis - Rainfall",
    "section": "4.3 Confidence Interval of Total Rainfall",
    "text": "4.3 Confidence Interval of Total Rainfall\n\n\nShow the code\nrain_yr_error &lt;- rainfall %&gt;%\n  group_by(Year) %&gt;%\n  summarise(n = n(), rain = sum(TotalRainfall, na.rm = TRUE), \n            sd = sd(TotalRainfall, na.rm = TRUE)) %&gt;%\n  mutate(se = sd/sqrt(n-1)) %&gt;% \n  ungroup()\n\nmodel &lt;- lm(rain ~ Year, rain_yr_error)\ny_intercept = coef(model)[1] \nslope_coeff = coef(model)[2]\nadjust_yintercept = slope_coeff * 1982 + y_intercept\n\ngg &lt;- ggplot(rain_yr_error) +\n       geom_errorbar(aes(x = factor(Year), ymin = rain - 2.58 * se, \n                      ymax = rain + 2.58*se), \n                      width=0.2, colour=\"black\", \n                      alpha=0.9, size=0.5) +\n       geom_point(aes(x = factor(Year), y = rain, \n             text = paste0(\"Year:\", `Year`, \n                          \"&lt;br&gt;Total Rainfall:\", round(rain, digits = 2),\n                          \"&lt;br&gt;95% CI:[\", \n                          round((rain - 2.58 * se), digits = 2), \",\",\n                          round((rain + 2.58 * se), digits = 2),\"]\")),\n             stat=\"identity\", color=\"darkred\", \n             size = 1.5, alpha = 1) +\n       geom_abline(slope = round(slope_coeff, 4), \n                   intercept = adjust_yintercept,\n                   untf = TRUE,\n                   color = \"blue\",\n                   linetype = \"dashed\")+\n       geom_text(aes(x = 11, y = 27.8, colour = \"blue\",\n                     label = paste0(\"Rainfall=\", \n                                    round(slope_coeff, 4), \"* Year \",\n                                    round(y_intercept, 4)))) +\n       labs (x = \"Year\", y = \"Annual mean temperatures (°C)\",\n             title = \"99% Confidence interval of annual total rainfall by year\",\n             subtitle = \"From 1982 to 2023\",\n             caption = \"Data from Meteorological Service Singapore website\") +\n       theme_minimal() + \n       theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),\n             plot.title = element_text(face = \"bold\", size = 12))\n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text = \n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\", \n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")),\n           showlegend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that the total rainfall over the years have increased."
  },
  {
    "objectID": "EDA/EDA-Rainfall.html#rainfall-across-the-months",
    "href": "EDA/EDA-Rainfall.html#rainfall-across-the-months",
    "title": "Exploratory Data Analysis - Rainfall",
    "section": "4.4 Rainfall across the months",
    "text": "4.4 Rainfall across the months\n\n4.4.1 Box plot across the months\n\n\nShow the code\ngg &lt;- ggplot(rainfall, \n       aes(x = factor(Month, levels = month.abb), y = TotalRainfall)) +\n  geom_violin(color = \"navy\", fill = \"lightblue\") +\n  geom_hline(data = rainfall, \n             aes(yintercept = mean(TotalRainfall, na.rm = TRUE)),\n             linetype = \"dashed\", size = 1, colour = \"brown\") +\n  geom_text(aes(x = 4.5, y = 27.3, \n                 label = paste0(\"Total Rainfall : \", \n                                round(sum(TotalRainfall,na.rm = TRUE),2), \"mm\")), \n            colour = \"brown\") +\n  stat_summary(fun = mean, geom = \"point\", \n               shape = 20, size = 3, color = \"orange\",\n               aes(text = paste0(\"Total Rainfall : \",\n                                 round(after_stat(y), 2), \"mm\"))) +\n  theme_minimal() +\n  labs(title = \"Monthly Total Rainfall across each month from 1981 to 2023\",\n       subtitle = \"November to February are cooler as compared to the rest of the year\",\n        y = \"Total Rainfall (mm)\",\n        x = \"Month\",\n        caption = \"Data from Meteorological Service Singapore website\")\n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text =\n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\",\n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")))\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that we have more rain in April, November and December.\n\n\n\n\n4.4.2 Heatmap across the months\n\n\nShow the code\nrain &lt;- rainfall %&gt;% \n        group_by(Year, Month) %&gt;% \n        summarise(TRain = sum(TotalRainfall, na.rm = TRUE))\n\ngg &lt;- ggplot(rain, aes(factor(Month, levels = month.abb), factor(Year), \n                          fill = TRain)) + \n    geom_tile(color = \"white\",\n              aes(text = paste0(Year, \"-\", Month,\n                                \"&lt;br&gt;Rainfall:\", round(TRain, 2), \"°C\"))) + \n    theme_minimal() + \n    scale_fill_gradient(name = \"Rainfall\",\n                        low = \"sky blue\", \n                        high = \"dark blue\") +\n    labs(x = NULL, y = NULL, \n         title = \"Total rainfall by year and month\")\n\nggplotly(gg, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that there are more rainfall in the recent years."
  },
  {
    "objectID": "EDA/data/geospatial/MPSZ-2019.html",
    "href": "EDA/data/geospatial/MPSZ-2019.html",
    "title": "The Heat is On!",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "EDA/Data_Preparation.html",
    "href": "EDA/Data_Preparation.html",
    "title": "Data Preparation",
    "section": "",
    "text": "This page will explain in detail how we extract the data from the Meteorological Service Singapore (MSS) website and how we clean the data for our subsequent analysis."
  },
  {
    "objectID": "EDA/Data_Preparation.html#installing-r-packages",
    "href": "EDA/Data_Preparation.html#installing-r-packages",
    "title": "Data Preparation",
    "section": "3.1 Installing R packages",
    "text": "3.1 Installing R packages\nThe code below uses p_load() of the Pacman package to check if all the required packages are installed on the laptop. If they are, then they will be launched into the R environment.\n\n\n\nPackage\nDescription\n\n\ntidyverse\nA collection of core packages designed for data science used extensively for data preparation and wrangling.\n\n\nlubridate\nFor manipulating date-times.\n\n\njanitor\nFor quick formatting of data frame columns.\n\n\nfs\nFor retrieving a list of file names in our directory for import into R\n\n\nvisdat\nFor checking missing values in a dataframe\n\n\n\n\npacman::p_load(readr, tidyverse, forecast, janitor, fs, visdat)"
  },
  {
    "objectID": "EDA/Data_Preparation.html#importing-data",
    "href": "EDA/Data_Preparation.html#importing-data",
    "title": "Data Preparation",
    "section": "3.2 Importing data",
    "text": "3.2 Importing data\nLet’s read all the 5,547 CSV files downloaded for the 18 weather stations that have records from the year 1980 onwards.\n\ndir_ls() function from the fs package in R to list filenames in our directory where we have saved the monthly historical records.\nmap_df() function from the purrr package is used to iterate over each file in the directory.\nlocale argument in read_csv() is to specify the encoding as Latin-1, as some of the headers contain special characters, like the degree symbol (°). The Latin-1 encoding ensures R can read and process such special characters.\ncol_types argument imports all columns as character data type.\nclean_names() of the janitor package converts into snake case and transliterates special characters such as the degree symbol (°) to ASCII.\n\n\nfilenames &lt;- fs::dir_ls(\"data/raw_data/\") \n\n# Read all files and clean the column names\ndata &lt;- filenames %&gt;%\n    map_df(~ read_csv(.x, \n                      locale = locale(encoding = \"latin1\"),\n                      col_types = cols(.default = \"character\")\n                      ) %&gt;% \n             janitor::clean_names()\n    ) \n\nglimpse(data)\n\n\n\n\n\n\n\nNote\n\n\n\nAll the 18 weather stations have a total of 168,836 records.\nThe data shows that there are two sets of variables for mean, maximum, and minimum temperature records:\n\nmean_temperature_c, maximum_temperature_c, and minimum_temperature_c\nmean_temperature_a_c, maximum_temperature_a_c, and minimum_temperature_a_c\n\nSome year’s data are in the first set of variables and others are in the second set of variables. This might happen during clean_names() where there is a minor difference in the column names from different files.\n\n\nIt will be meaningful to also analyse weather data by region in Singapore. Hence, we also searched for each weather station’s region on public websites like the HDB website and data.gov.sg. Let’s import the region information now.\n\nregion &lt;- read_csv(\"data/Region.csv\") \nglimpse(region)\n\nRows: 18\nColumns: 2\n$ Station &lt;chr&gt; \"Admiralty\", \"Ang Mo Kio\", \"Boon Lay (East)\", \"Changi\", \"Choa …\n$ Region  &lt;chr&gt; \"North\", \"North-East\", \"West\", \"East\", \"West\", \"West\", \"East\",…"
  },
  {
    "objectID": "EDA/Data_Preparation.html#data-wrangling",
    "href": "EDA/Data_Preparation.html#data-wrangling",
    "title": "Data Preparation",
    "section": "3.3 Data Wrangling",
    "text": "3.3 Data Wrangling\n\n3.3.1 Remove extra columns\nLet’s use the coalesce() function to copy the values from the second set of temperature values to the first set and then deselect the second set of columns. We are also not focusing on the wind speed variables, hence we will deselect the 2 variables on wind speed.\n\ndata$mean_temperature_c &lt;- coalesce(data$mean_temperature_c, \n                                    data$mean_temperature_a_c) \ndata$maximum_temperature_c &lt;- coalesce(data$maximum_temperature_c, \n                                       data$maximum_temperature_a_c)\ndata$minimum_temperature_c &lt;- coalesce(data$minimum_temperature_c,     \n                                       data$minimum_temperature_a_c)\n\ndata %&gt;% \n  select(-c(mean_temperature_a_c, \n            maximum_temperature_a_c, \n            minimum_temperature_a_c, \n            mean_wind_speed_km_h, \n            max_wind_speed_km_h))\n\nglimpse(data)\n\n\n\n3.3.2 Remove weird characters\nThere are some weird characters (‘097’) in the data frame. Let’s replace them with NA.\n\ndata &lt;- data %&gt;% \n  mutate_all(~ ifelse(. == \"\\u0097\", NA, .))\nglimpse(data)\n\n\n\n3.3.3 Tidy the data\nFinally, let’s clean up the weather data and create a column for date, change the necessary columns to numeric, and shorten the column names for simplicity.\n\nweather &lt;- data %&gt;% \n  mutate(station = station,\n       year = as.numeric(year),\n       Date = make_date(year = year, month = month, day = 1),\n       month = lubridate::month(Date, label = TRUE),         \n       day = as.numeric(day),\n       daily_rainfall_total_mm = as.numeric(daily_rainfall_total_mm), \n       highest_30_min_rainfall_mm = as.numeric(highest_30_min_rainfall_mm), \n       highest_60_min_rainfall_mm = as.numeric(highest_60_min_rainfall_mm),\n       highest_120_min_rainfall_mm = as.numeric(highest_120_min_rainfall_mm),\n       mean_temperature_c = as.numeric(mean_temperature_c), \n       maximum_temperature_c = as.numeric(maximum_temperature_c), \n       minimum_temperature_c = as.numeric(minimum_temperature_c)) %&gt;% \n  rename(\n    Station = station,\n    Year = year,\n    Month = month,\n    Day = day,\n    Rainfall = daily_rainfall_total_mm,\n    Rainfall30 = highest_30_min_rainfall_mm,\n    Rainfall60 = highest_60_min_rainfall_mm,\n    Rainfall120 = highest_120_min_rainfall_mm,\n    MeanTemperature = mean_temperature_c,\n    MaxTemperature = maximum_temperature_c,\n    MinTemperature = minimum_temperature_c\n  ) %&gt;% \n  subset(select = -c(mean_temperature_a_c,\n                     maximum_temperature_a_c,\n                     minimum_temperature_a_c, \n                     mean_wind_speed_km_h, \n                     max_wind_speed_km_h))\n\n\n\n3.3.4 Merge datasets\nLet’s join the weather data with its region information using the common variable ‘Station’.\n\nweather &lt;- merge(weather, region, by= \"Station\")\nglimpse(weather)\n\n\n\n3.3.5 Create subsets of data\nLet’s create subsets of weather data for only Temperature or Rainfall and save them as RDS files for easy loading when we are developing for the subsequent analysis.\n\nTemp_YM &lt;- weather %&gt;% \n   group_by(Station, Region, Year, Month) %&gt;% \n   reframe(Date = Date,            \n           MeanTemp = round(mean(MeanTemperature, na.rm = TRUE),1),\n           MaxTemp = round(max(MaxTemperature, na.rm = TRUE),1),\n           MinTemp = round(min(MinTemperature, na.rm = TRUE),1) ) %&gt;% \n   distinct() %&gt;% \n   ungroup() %&gt;% \n   filter(!is.na(MeanTemp))\n\nError in eval(expr, envir, enclos): object 'weather' not found\n\nwrite_rds(Temp_YM, \"data/temperature.rds\")\n\nError in eval(expr, envir, enclos): object 'Temp_YM' not found\n\nRainfall_YM &lt;- weather %&gt;% \n   group_by(Station, Region, Year, Month) %&gt;% \n   reframe(Date = Date,\n           TotalRainfall = round(sum(Rainfall, na.rm = TRUE),1),\n           TotalRainfall30 = round(sum(Rainfall30, na.rm = TRUE),1),\n           TotalRainfall60 = round(sum(Rainfall60, na.rm = TRUE),1),\n           TotalRainfall120 = round(sum(Rainfall120, na.rm = TRUE),1)) %&gt;% \n   distinct() %&gt;% \n   ungroup() %&gt;% \n   filter(!is.na(TotalRainfall))\n\nError in eval(expr, envir, enclos): object 'weather' not found\n\nwrite_rds(Rainfall_YM, \"data/rainfall.rds\")\n\nError in eval(expr, envir, enclos): object 'Rainfall_YM' not found\n\n\nCheck to ensure there is no missing data in Temp_YM and Rainfall_YM.\n\nvis_miss(Temp_YM)\n\nError in eval(expr, envir, enclos): object 'Temp_YM' not found\n\nvis_miss(Rainfall_YM)\n\nError in eval(expr, envir, enclos): object 'Rainfall_YM' not found\n\n\nFinally, we create further subsets to be used in Confirmatory Data Analysis:\n\ntemperature &lt;- read_rds(\"data/temperature.rds\")\n\nTemp_Annual &lt;- temperature %&gt;%\n  group_by(Station, Region, Year) %&gt;%\n  summarise(Avg_Mean_Temp = round(mean(MeanTemp, na.rm = TRUE),1),\n            Avg_Max_Temp = round(mean(MaxTemp, na.rm = TRUE),1),\n            Avg_Min_Temp = round(mean(MinTemp, na.rm = TRUE),1),\n            Max_Temp = round(max(MaxTemp, na.rm = TRUE),1),\n            Min_Temp = round(min(MinTemp, na.rm = TRUE),1)) %&gt;%\n  distinct() %&gt;%\n  ungroup() %&gt;%\n  filter(!is.na(Avg_Mean_Temp))\n\nwrite_rds(Temp_Annual, \"data/temp_annual.rds\")\n\nTemp_Monthly &lt;- temperature %&gt;%\n  group_by(Station, Region, Year, Month) %&gt;%\n  summarise(Avg_Mean_Temp = round(mean(MeanTemp, na.rm = TRUE),1),\n            Avg_Max_Temp = round(mean(MaxTemp, na.rm = TRUE),1),\n            Avg_Min_Temp = round(mean(MinTemp, na.rm = TRUE),1),\n            Max_Temp = round(max(MaxTemp, na.rm = TRUE),1),\n            Min_Temp = round(min(MinTemp, na.rm = TRUE),1)) %&gt;%\n  distinct() %&gt;%\n  ungroup() %&gt;%\n  filter(!is.na(Avg_Mean_Temp))\n\nwrite_rds(Temp_Monthly, \"data/temp_monthly.rds\")\n\nrainfall &lt;- read_rds(\"data/rainfall.rds\")\n\nRainfall_Annual &lt;- rainfall %&gt;%\n  group_by(Station, Region, Year) %&gt;% \n   reframe(Total_Rf = round(sum(TotalRainfall, na.rm = TRUE),1),\n           Total_Rf_30 = round(sum(TotalRainfall30, na.rm = TRUE),1),\n           Total_Rf_60 = round(sum(TotalRainfall60, na.rm = TRUE),1),\n           Total_Rf_120 = round(sum(TotalRainfall120, na.rm = TRUE),1),\n           Avg_Total_Rf = round(mean(TotalRainfall, na.rm = TRUE),1),\n           Avg_Total_Rf30 = round(mean(TotalRainfall30, na.rm = TRUE),1),\n           Avg_Total_Rf60 = round(mean(TotalRainfall60, na.rm = TRUE),1),\n           Avg_Total_Rf120 = round(mean(TotalRainfall120, na.rm = TRUE),1),\n           Min_Total_Rf = round(min(TotalRainfall, na.rm = TRUE),1),\n           Max_Total_Rf = round(max(TotalRainfall, na.rm = TRUE),1)) %&gt;% \n   distinct() %&gt;% \n   ungroup() %&gt;% \n   filter(!is.na(Total_Rf))\n\nwrite_rds(Rainfall_Annual, \"data/rf_annual.rds\")\n\nRainfall_Monthly &lt;- rainfall %&gt;%\n  group_by(Station, Region, Year, Month) %&gt;% \n   reframe(Total_Rf = round(sum(TotalRainfall, na.rm = TRUE),1),\n           Total_Rf_30 = round(sum(TotalRainfall30, na.rm = TRUE),1),\n           Total_Rf_60 = round(sum(TotalRainfall60, na.rm = TRUE),1),\n           Total_Rf_120 = round(sum(TotalRainfall120, na.rm = TRUE),1),\n           Avg_Total_Rf = round(mean(TotalRainfall, na.rm = TRUE),1),\n           Avg_Total_Rf30 = round(mean(TotalRainfall30, na.rm = TRUE),1),\n           Avg_Total_Rf60 = round(mean(TotalRainfall60, na.rm = TRUE),1),\n           Avg_Total_Rf120 = round(mean(TotalRainfall120, na.rm = TRUE),1),\n           Min_Total_Rf = round(min(TotalRainfall, na.rm = TRUE),1),\n           Max_Total_Rf = round(max(TotalRainfall, na.rm = TRUE),1)) %&gt;% \n   distinct() %&gt;% \n   ungroup() %&gt;% \n   filter(!is.na(Total_Rf))\n\nwrite_rds(Rainfall_Monthly, \"data/rf_monthly.rds\")"
  },
  {
    "objectID": "EDA/EDA-Temperature.html",
    "href": "EDA/EDA-Temperature.html",
    "title": "Exploratory Data Analysis - Temperature",
    "section": "",
    "text": "pacman::p_load(tidyverse, readr, psych, st, stars, tmap, sf,\n               ggstatsplot, plotly, ggplot2, ggdist, dplyr, ggiraph)"
  },
  {
    "objectID": "EDA/EDA-Temperature.html#analyse-temperature-using-maps",
    "href": "EDA/EDA-Temperature.html#analyse-temperature-using-maps",
    "title": "Exploratory Data Analysis - Temperature",
    "section": "4.1 Analyse temperature using maps",
    "text": "4.1 Analyse temperature using maps\nLet’s map the station to the planning area (PA).\n\n\nShow the code\nstation_to_PA &lt;- c(\n  \"Admiralty\" = \"WOODLANDS\",\n  \"Ang Mo Kio\" = \"ANG MO KIO\",\n  \"Boon Lay (East)\" = \"BOON LAY\",\n  \"Changi\" = \"CHANGI\",\n  \"Choa Chu Kang (South)\" = \"CHOA CHU KANG\",\n  \"Clementi\" = \"CLEMENTI\",\n  \"East Coast Parkway\" = \"BEDOK\",\n  \"Jurong (West)\" = \"JURONG WEST\",\n  \"Khatib\" = \"YISHUN\",\n  \"Marina Barrage\" = \"DOWNTOWN CORE\",\n  \"Newton\" = \"NEWTON\",\n  \"Pasir Panjang\" = \"PASIR PANJANG\",\n  \"Paya Lebar\" = \"PAYA LEBAR\",\n  \"Seletar\" = \"SELETAR\",\n  \"Sembawang\" = \"SEMBAWANG\",\n  \"Tai Seng\" = \"HOUGANG\",\n  \"Tengah\" = \"TENGAH\",\n  \"Tuas South\" = \"TUAS\"\n)\n\ntemperature$PA &lt;- station_to_PA[temperature$Station]\ntemperature &lt;- temperature[, c(\"PA\", setdiff(names(temperature), \"PA\"))]\nhead(temperature)\n\n\n# A tibble: 6 × 9\n  PA        Station   Region  Year Month Date       MeanTemp MaxTemp MinTemp\n  &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;ord&gt; &lt;date&gt;        &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 WOODLANDS Admiralty North   2009 Jan   2009-01-01     26.3    31.9    23.3\n2 WOODLANDS Admiralty North   2009 Feb   2009-02-01     26.8    33.4    23  \n3 WOODLANDS Admiralty North   2009 Mar   2009-03-01     26.9    34.5    22.2\n4 WOODLANDS Admiralty North   2009 Apr   2009-04-01     28.1    35.1    23.7\n5 WOODLANDS Admiralty North   2009 May   2009-05-01     28.5    34.7    21.8\n6 WOODLANDS Admiralty North   2009 Jun   2009-06-01     28.9    34.7    23.7\n\n\n\ntemp_map &lt;- temperature %&gt;% \n  group_by(PA, Station, Year) %&gt;% \n  summarise(Annual_Mean_Temperature = \n              mean(MeanTemp, na.rm = TRUE),\n            Annual_Maximum_Temperature = \n              max(MaxTemp, na.rm = TRUE),\n            Annual_Minimum_Temperature = \n              min(MinTemp, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nglimpse(temp_map)\n\nRows: 323\nColumns: 6\n$ PA                         &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"…\n$ Station                    &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"…\n$ Year                       &lt;dbl&gt; 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2…\n$ Annual_Mean_Temperature    &lt;dbl&gt; 27.40000, 27.71667, 27.31667, 27.50833, 27.…\n$ Annual_Maximum_Temperature &lt;dbl&gt; 34.5, 36.0, 35.4, 34.8, 35.6, 35.0, 34.9, 3…\n$ Annual_Minimum_Temperature &lt;dbl&gt; 21.8, 21.7, 21.5, 21.8, 20.0, 21.8, 20.3, 2…\n\n\n\nmpsztemp &lt;- left_join(mpsz, temp_map,\n                         by = c(\"PLN_AREA_N\" = \"PA\"))\nglimpse(mpsztemp)\n\nRows: 2,357\nColumns: 12\n$ SUBZONE_N                  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTS…\n$ SUBZONE_C                  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MU…\n$ PLN_AREA_N                 &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE R…\n$ PLN_AREA_C                 &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"…\n$ REGION_N                   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRA…\n$ REGION_C                   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"…\n$ Station                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Year                       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Annual_Mean_Temperature    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Annual_Maximum_Temperature &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Annual_Minimum_Temperature &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry                   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29...…\n\n\nLet’s plot the annual mean temperature distribution across Singapore.\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"Annual_Mean_Temperature\", \n              palette = \"Blues\", \n              style = \"jenks\") +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt seems like the northern area of Singapore has a cooler mean temperature.\n\n\nLet’s compare the maximum and minimum temperatures.\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"Annual_Maximum_Temperature\", \n              palette = \"Blues\", \n              style = \"jenks\") +\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\ntm_shape(mpsztemp) +\n  tm_polygons(col = \"Annual_Minimum_Temperature\", \n              palette = \"Blues\", \n              style = \"jenks\") +\n  tm_view(set.zoom.limits = c(11,12))"
  },
  {
    "objectID": "EDA/EDA-Temperature.html#temperature-time-series",
    "href": "EDA/EDA-Temperature.html#temperature-time-series",
    "title": "Exploratory Data Analysis - Temperature",
    "section": "4.2 Temperature Time Series",
    "text": "4.2 Temperature Time Series\n\n4.2.1 Overall - Temperature Time Series\n\n\nShow the code\ngg &lt;- ggplot(temperature, aes(x = Date, y = MeanTemp, \n                         color = factor(Year))) +\n    geom_line(linewidth = 0.1) +\n    geom_point(aes(text = paste0(\"Month:\", Month, \n                                \"&lt;br&gt;MeanTemp:\", MeanTemp, \"ºC\"))) +\n    labs(x = \"Year\", y = \"Monthly mean temperature (ºC)\", color = \"Year\",\n         title = \"Trend of Monthly Mean Temperature at Changi Station from 1981 to 2023\", \n         subtitle = \"Gentle trend line sloping upwards from 1981\",\n         caption = \"Data from Meteorological Service Singapore website\") +\n    geom_smooth(method = \"lm\", \n                se = FALSE, color = \"black\") +\n    theme_minimal() \n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text = \n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\", \n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")),\n           showlegend = FALSE,\n    annotations = list(text = gg$labels$caption,\n                      xref = \"paper\", yref = \"paper\",\n                      x = 1000, y = 24,\n                      xanchor = \"right\", yanchor = \"top\",\n                      showarrow = FALSE)) \n\n\n\n\n\n\n\n\n4.2.2 Temperature Time Series by station\n\nTemp_station &lt;- temperature %&gt;%\n  group_by(Station, Year) %&gt;%\n  summarise(Temp = mean(MeanTemp, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nTemp_station$mean_tooltip &lt;- c(paste0(\n  \"Year: \", Temp_station$Year,\n  \"\\n Station: \", Temp_station$Station,\n  \"\\n Mean Temp: \", Temp_station$Temp, \"°C\"))\n\nline &lt;- ggplot(data = Temp_station,\n               aes(x = Year,\n                   y = Temp,\n                   group = Station,\n                   color = Station,\n                   data_id = Station)) +\n  geom_line_interactive(size = 1.2,\n                        alpha = 0.4) +\n  geom_point_interactive(aes(tooltip = Temp_station$mean_tooltip),\n                         fill = \"white\",\n                         size = 1,\n                         stroke = 1,\n                         shape = 21) +\n  theme_classic() +\n  ylab(\"Annual Mean Temperature (°C)\") +\n  xlab(\"Year\") +\n  ggtitle(\"Annual Average of Mean Temperatures\") +\n  theme(plot.title = element_text(size = 10),\n        plot.subtitle = element_text(size = 8)) \n\ngirafe(ggobj = line, \n       width_svg = 8,\n       height_svg = 6 * 0.618,\n       options = list(\n         opts_hover(css = \"stroke-width: 2.5; opacity: 1;\"),\n         opts_hover_inv(css = \"stroke-width: 1;opacity:0.6;\")))"
  },
  {
    "objectID": "EDA/EDA-Temperature.html#confidence-interval-of-mean-temperature",
    "href": "EDA/EDA-Temperature.html#confidence-interval-of-mean-temperature",
    "title": "Exploratory Data Analysis - Temperature",
    "section": "4.3 COnfidence Interval of Mean Temperature",
    "text": "4.3 COnfidence Interval of Mean Temperature\n\n\nShow the code\nTemp_yr_error &lt;- temperature %&gt;%\n  group_by(Year) %&gt;%\n  summarise(n = n(), Temp = mean(MeanTemp, na.rm = TRUE), \n            sd = sd(MeanTemp, na.rm = TRUE)) %&gt;%\n  mutate(se = sd/sqrt(n-1)) %&gt;% \n  ungroup()\n\nmodel &lt;- lm(Temp ~ Year, Temp_yr_error)\ny_intercept = coef(model)[1] \nslope_coeff = coef(model)[2]\nadjust_yintercept = slope_coeff * 1982 + y_intercept\n\ngg &lt;- ggplot(Temp_yr_error) +\n       geom_errorbar(aes(x = factor(Year), ymin = Temp - 2.58 * se, \n                      ymax = Temp+2.58*se), \n                      width=0.2, colour=\"black\", \n                      alpha=0.9, size=0.5) +\n       geom_point(aes(x = factor(Year), y = Temp, \n             text = paste0(\"Year:\", `Year`, \n                          \"&lt;br&gt;Avg. Temp:\", round(Temp, digits = 2),\n                          \"&lt;br&gt;95% CI:[\", \n                          round((Temp - 2.58 * se), digits = 2), \",\",\n                          round((Temp + 2.58 * se), digits = 2),\"]\")),\n             stat=\"identity\", color=\"darkred\", \n             size = 1.5, alpha = 1) +\n       geom_abline(slope = round(slope_coeff, 4), \n                   intercept = adjust_yintercept,\n                   untf = TRUE,\n                   color = \"blue\",\n                   linetype = \"dashed\")+\n       geom_text(aes(x = 11, y = 27.8, colour = \"blue\",\n                     label = paste0(\"Temp=\", \n                                    round(slope_coeff, 4), \"* Year \",\n                                    round(y_intercept, 4)))) +\n       labs (x = \"Year\", y = \"Annual mean temperatures (°C)\",\n             title = \"99% Confidence interval of annual mean temperatures by year\",\n             subtitle = \"From 1982 to 2023\",\n             caption = \"Data from Meteorological Service Singapore website\") +\n       theme_minimal() + \n       theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),\n             plot.title = element_text(face = \"bold\", size = 12))\n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text = \n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\", \n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")),\n           showlegend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that the mean temperature over the years have increased and the confidence intervals have narrowed."
  },
  {
    "objectID": "EDA/EDA-Temperature.html#temperature-across-the-months",
    "href": "EDA/EDA-Temperature.html#temperature-across-the-months",
    "title": "Exploratory Data Analysis - Temperature",
    "section": "4.4 Temperature across the months",
    "text": "4.4 Temperature across the months\n\n4.4.1 Box plot across the months\n\n\nShow the code\ngg &lt;- ggplot(temperature, \n       aes(x = factor(Month, levels = month.abb), y = MeanTemp)) +\n  geom_violin(color = \"navy\", fill = \"lightblue\") +\n  geom_hline(data = temperature, \n             aes(yintercept = mean(MeanTemp, na.rm = TRUE)),\n             linetype = \"dashed\", size = 1, colour = \"brown\") +\n  geom_text(aes(x = 4.5, y = 27.3, \n                 label = paste0(\"Mean : \", \n                                round(mean(MeanTemp,na.rm = TRUE),2), \"°C\")), \n            colour = \"brown\") +\n  stat_summary(fun = mean, geom = \"point\", \n               shape = 20, size = 3, color = \"orange\",\n               aes(text = paste0(\"Mean : \", round(after_stat(y), 2), \"°C\"))) +\n  theme_minimal() +\n  labs(title = \"Daily mean temperature across each month from 1981 to 2023\",\n       subtitle = \"November to February are cooler as compared to the rest of the year\",\n        y = \"Daily mean Temperatures (°C)\",\n        x = \"Month\",\n        caption = \"Data from Meteorological Service Singapore website\")\n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text =\n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\",\n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")))\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that temperature in November to February are below the average temperature.\n\n\n\n\n4.4.2 Heatmap across the months\n\n\nShow the code\nTemp &lt;- temperature %&gt;% \n        group_by(Year, Month) %&gt;% \n        summarise(MTemp = mean(MeanTemp, na.rm = TRUE))\n\ngg &lt;- ggplot(Temp, aes(factor(Month, levels = month.abb), factor(Year), \n                          fill = MTemp)) + \n    geom_tile(color = \"white\",\n              aes(text = paste0(Year, \"-\", Month,\n                                \"&lt;br&gt;Temp:\", round(MTemp, 2), \"°C\"))) + \n    theme_minimal() + \n    scale_fill_gradient(name = \"Temperature\",\n                        low = \"sky blue\", \n                        high = \"dark blue\") +\n    labs(x = NULL, y = NULL, \n         title = \"Mean temperatures by year and month\",\n         subtitle = \"Hotter in more months of 2023 as compared to the other years\")\n\nggplotly(gg, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can observe that temperature in May and June are consistently high across the years."
  },
  {
    "objectID": "proposal/proposal.html",
    "href": "proposal/proposal.html",
    "title": "Project Proposal",
    "section": "",
    "text": "Source: Today Online"
  },
  {
    "objectID": "proposal/proposal.html#exploratory-data-analysis-and-visualizations",
    "href": "proposal/proposal.html#exploratory-data-analysis-and-visualizations",
    "title": "Project Proposal",
    "section": "4.1. Exploratory Data Analysis and Visualizations",
    "text": "4.1. Exploratory Data Analysis and Visualizations\nFirstly, our exploratory data analysis will uncover trends in Singapore’s historical climate data through a range of visualizations to convey our finding effectively:\n\nTime series analysis utilizes time-dependent decomposition to discern the variations, trends and anomalies in the climate data across the periods\nComparative analysis using box plots and violin plots to highlight the differences in climate data across periods or locations • Heatmap to plot changes in climate data by periods\nDistribution analysis through ridgeline plots to show the distribution of climate data by specific periods or locations\nCorrelation matrix between climate data to investigate the inter dependencies between the climate data\nInteractive maps to show geographical impacts of climate change, such as potential flooding areas and urban heat issues.\n\nThe visualizations will be created using R packages;ggplot2 for foundational graphics, extensions such as ggridges for ridgeline plots, ggthemes and patchwork for styling and layouts. Interactive graphics will be incorporated using ggiraph and plotly and the animations produced via gganimate.\nInteractivity can be included in the visualizations, such as coordinated multiple views to show temperature and rainfall data side-by-side. Animations can be used to showcase changes in temperature and rainfall over the years."
  },
  {
    "objectID": "proposal/proposal.html#predictive-model",
    "href": "proposal/proposal.html#predictive-model",
    "title": "Project Proposal",
    "section": "4.2. Predictive Model",
    "text": "4.2. Predictive Model\nWe aim to forecast future climate trends by exploring a suite of time series forecasting models:\n\nTime series forecasting is the process of using historical data to predict future values of a variable that changes over time. It is a common and useful technique for weather prediction.  There are many types of models for time series forecasting, such as exponential smoothing, ARIMA, SARIMA, VAR and neural networks.\nMachine learning approaches, such as Random Forest and Gradient Boosting Machines, for non-linear trend capturing.\n\nWe will compare and evaluate different models based on their predictive performance in terms of accuracy, precision and recall using evaluation metrics such as cross-validation, AIC and BIC, and forecasting accuracy measures using RMSE. The interpretability of models will also be a key consideration to ensure that the findings are understandable to the public (Figure 2).\nFigure 2 is a prototype of RShiny application."
  },
  {
    "objectID": "proposal/proposal.html#footnotes",
    "href": "proposal/proposal.html#footnotes",
    "title": "Project Proposal",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.ipcc.ch/report/ar6/syr/downloads/report/IPCC_AR6_SYR_SPM.pdf↩︎\nhttps://www.nccs.gov.sg/singapores-climate-action/impact-of-climate-change-in-singapore/↩︎\nhttps://www.mse.gov.sg/policies/climate-change#:~:text=Understanding%20Climate%20Change&text=A%20warmer%20climate%20leads%20to,more%20frequent%20extreme%20weather%20events.↩︎\nhttps://www.todayonline.com/singapore/explainer-why-climate-change-should-matter-singaporeans-and-what-government-doing-about-it↩︎\nhttp://www.weather.gov.sg/wp-content/uploads/2022/06/Station_Records.pdf↩︎"
  },
  {
    "objectID": "Prototype/data/geospatial/MPSZ-2019.html",
    "href": "Prototype/data/geospatial/MPSZ-2019.html",
    "title": "The Heat is On!",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html",
    "title": "Prototype - Time Series Analysis",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggiraph, reshape, ggthemes, \n               gganimate, plotly, scales, ggHoriPlot, ggrepel,\n               CGPfunctions, ggTimeSeries, datagovsgR, neaSG)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#prototype",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#prototype",
    "title": "Prototype - Time Series Analysis",
    "section": "Prototype",
    "text": "Prototype"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#total-stations",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#total-stations",
    "title": "Prototype - Time Series Analysis",
    "section": "Total Stations",
    "text": "Total Stations\n\nstation_count &lt;- Temp_YM %&gt;%\n  summarise(Station_Count = n_distinct(Station))\nstation_count\n\n# A tibble: 1 × 1\n  Station_Count\n          &lt;int&gt;\n1            18"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#mean-temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#mean-temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Mean Temperature",
    "text": "Mean Temperature\n\nmean_temperature &lt;- Temp_YM %&gt;%\n  summarise(Mean_Temperature = round(mean(MeanTemp, na.rm = TRUE), 1))\nmean_temperature\n\n# A tibble: 1 × 1\n  Mean_Temperature\n             &lt;dbl&gt;\n1             27.7"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#weather-forecast",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#weather-forecast",
    "title": "Prototype - Time Series Analysis",
    "section": "Weather Forecast",
    "text": "Weather Forecast\nThis functions calls upon the weather forecast API from data.gov.sg and returns a data frame con- taining different metrics of the forecast. 2-hour, 24-hour and 4-day forecasts are availible. This data provided by the API is updated half-hourly.\n\ncurrent_time &lt;- Sys.time()\nformatted_date &lt;- format(current_time, \"%Y-%m-%d\")\nformatted_time &lt;- format(current_time, \"%H:%M:%S\")\nformatted_datetime &lt;- paste(formatted_date, formatted_time, sep = \"T\")\n\n\nweather_forecast(formatted_datetime)\n\n                      area            forecast\n1               Ang Mo Kio Partly Cloudy (Day)\n2                    Bedok Partly Cloudy (Day)\n3                   Bishan Partly Cloudy (Day)\n4                 Boon Lay Partly Cloudy (Day)\n5              Bukit Batok Partly Cloudy (Day)\n6              Bukit Merah Partly Cloudy (Day)\n7            Bukit Panjang Partly Cloudy (Day)\n8              Bukit Timah Partly Cloudy (Day)\n9  Central Water Catchment Partly Cloudy (Day)\n10                  Changi Partly Cloudy (Day)\n11           Choa Chu Kang Partly Cloudy (Day)\n12                Clementi Partly Cloudy (Day)\n13                    City Partly Cloudy (Day)\n14                 Geylang Partly Cloudy (Day)\n15                 Hougang Partly Cloudy (Day)\n16             Jalan Bahar Partly Cloudy (Day)\n17             Jurong East Partly Cloudy (Day)\n18           Jurong Island Partly Cloudy (Day)\n19             Jurong West Partly Cloudy (Day)\n20                 Kallang Partly Cloudy (Day)\n21            Lim Chu Kang Partly Cloudy (Day)\n22                  Mandai Partly Cloudy (Day)\n23           Marine Parade Partly Cloudy (Day)\n24                  Novena Partly Cloudy (Day)\n25               Pasir Ris Partly Cloudy (Day)\n26              Paya Lebar Partly Cloudy (Day)\n27                 Pioneer Partly Cloudy (Day)\n28            Pulau Tekong Partly Cloudy (Day)\n29              Pulau Ubin Partly Cloudy (Day)\n30                 Punggol Partly Cloudy (Day)\n31              Queenstown Partly Cloudy (Day)\n32                 Seletar Partly Cloudy (Day)\n33               Sembawang Partly Cloudy (Day)\n34                Sengkang Partly Cloudy (Day)\n35                 Sentosa Partly Cloudy (Day)\n36               Serangoon Partly Cloudy (Day)\n37        Southern Islands Partly Cloudy (Day)\n38            Sungei Kadut Partly Cloudy (Day)\n39                Tampines Partly Cloudy (Day)\n40                 Tanglin Partly Cloudy (Day)\n41                  Tengah Partly Cloudy (Day)\n42               Toa Payoh Partly Cloudy (Day)\n43                    Tuas Partly Cloudy (Day)\n44         Western Islands Partly Cloudy (Day)\n45 Western Water Catchment Partly Cloudy (Day)\n46               Woodlands Partly Cloudy (Day)\n47                  Yishun Partly Cloudy (Day)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#air-temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#air-temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Air Temperature",
    "text": "Air Temperature\n\nget_airtemp(formatted_date, formatted_date)\n\n[1] \"2024-03-24\"\n[1] \"2024-03-24\"\n\n\n                     timestamp readings.station_id readings.value\n                        &lt;char&gt;              &lt;char&gt;          &lt;num&gt;\n  1: 2024-03-24T00:01:00+08:00                S109           27.9\n  2: 2024-03-24T00:02:00+08:00                S109           27.9\n  3: 2024-03-24T00:03:00+08:00                S109           27.9\n  4: 2024-03-24T00:04:00+08:00                S109           27.9\n  5: 2024-03-24T00:05:00+08:00                S109           27.9\n ---                                                             \n950: 2024-03-24T15:51:00+08:00                S109           33.1\n951: 2024-03-24T15:52:00+08:00                S109           33.0\n952: 2024-03-24T15:53:00+08:00                S109           32.9\n953: 2024-03-24T15:54:00+08:00                S109           32.9\n954: 2024-03-24T15:55:00+08:00                 S50           32.5\n     readings.station_id.1 readings.value.1 readings.station_id.2\n                    &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n  1:                  S117             28.8                   S50\n  2:                  S117             28.8                   S50\n  3:                  S117             28.7                   S50\n  4:                  S117             28.7                   S50\n  5:                  S117             28.7                   S50\n ---                                                             \n950:                  S117             31.7                   S50\n951:                  S117             31.6                   S50\n952:                  S117             31.7                   S50\n953:                  S117             32.0                   S50\n954:                   S43             32.7                   S44\n     readings.value.2 readings.station_id.3 readings.value.3\n                &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n  1:             27.8                  S107             27.9\n  2:             27.8                  S107             27.9\n  3:             27.8                  S107             27.9\n  4:             27.8                  S107             27.8\n  5:             27.7                  S107             27.8\n ---                                                        \n950:             32.3                  S107             29.5\n951:             32.5                  S107             29.5\n952:             32.5                  S107             29.6\n953:             32.4                  S107             29.6\n954:             32.6                  S111             30.7\n     readings.station_id.4 readings.value.4 readings.station_id.5\n                    &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n  1:                   S43             28.2                   S44\n  2:                   S43             28.2                   S44\n  3:                   S43             28.2                   S44\n  4:                   S43             28.2                   S44\n  5:                   S43             28.2                   S44\n ---                                                             \n950:                   S43             32.9                   S44\n951:                   S43             33.1                   S44\n952:                   S43             33.0                   S44\n953:                   S43             32.9                   S44\n954:                  S115             33.8                  S104\n     readings.value.5 readings.station_id.6 readings.value.6\n                &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n  1:             28.0                  S121             27.7\n  2:             28.0                  S121             27.7\n  3:             28.0                  S121             27.7\n  4:             28.0                  S121             27.6\n  5:             28.0                  S121             27.7\n ---                                                        \n950:             32.6                  S121             33.0\n951:             32.6                  S121             33.0\n952:             32.6                  S121             33.2\n953:             32.5                  S121             33.2\n954:             32.8                  &lt;NA&gt;               NA\n     readings.station_id.7 readings.value.7 readings.station_id.8\n                    &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n  1:                  S111             27.6                   S24\n  2:                  S111             27.6                   S24\n  3:                  S111             27.6                  S115\n  4:                  S111             27.6                  S115\n  5:                  S111             27.6                  S115\n ---                                                             \n950:                  S111             30.7                  S115\n951:                  S111             30.8                  S115\n952:                  S111             30.8                  S115\n953:                  S111             30.7                  S115\n954:                  &lt;NA&gt;               NA                  &lt;NA&gt;\n     readings.value.8 readings.station_id.9 readings.value.9\n                &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n  1:             27.5                  S116             28.6\n  2:             27.5                  S116             28.5\n  3:             28.8                   S24             27.5\n  4:             28.8                   S24             27.5\n  5:             28.7                   S24             27.5\n ---                                                        \n950:             33.1                   S24             33.1\n951:             33.2                   S24             33.2\n952:             33.4                   S24             33.0\n953:             33.6                   S24             33.1\n954:               NA                  &lt;NA&gt;               NA\n     readings.station_id.10 readings.value.10 readings.station_id.11\n                     &lt;char&gt;             &lt;num&gt;                 &lt;char&gt;\n  1:                   S104              27.5                   &lt;NA&gt;\n  2:                   S104              27.5                   &lt;NA&gt;\n  3:                   S116              28.5                   S104\n  4:                   S116              28.5                   S104\n  5:                   S116              28.6                   S104\n ---                                                                \n950:                   S116              31.8                   S104\n951:                   S116              32.1                   S104\n952:                   S116              32.2                   S104\n953:                   S116              32.3                   S104\n954:                   &lt;NA&gt;                NA                   &lt;NA&gt;\n     readings.value.11\n                 &lt;num&gt;\n  1:                NA\n  2:                NA\n  3:              27.5\n  4:              27.5\n  5:              27.5\n ---                  \n950:              32.6\n951:              32.6\n952:              32.6\n953:              32.7\n954:                NA\n\n\n\nlatest_airtemp &lt;- head(get_airtemp(formatted_date, formatted_date), n = 1)\n\n[1] \"2024-03-24\"\n[1] \"2024-03-24\"\n\ncolumn_names &lt;- paste0(\"readings.value.\", 1:12)\nvalues &lt;- sapply(column_names, function(col) latest_airtemp[[col]])\naverage_value &lt;- mean(values, na.rm = TRUE)\nprint(average_value)\n\n[1] NA"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#ultra-violet-index",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#ultra-violet-index",
    "title": "Prototype - Time Series Analysis",
    "section": "Ultra-violet Index",
    "text": "Ultra-violet Index\nThis functions calls upon the UVI API from data.gov.sg and returns a data frame of the different measures of the UVI across Singapore and returns the closest UVI value presently and for the past few hours. This data provided by the API is updated hourly.\n\nuvi(formatted_datetime)\n\n  value                 timestamp\n1    10 2024-03-24T15:00:00+08:00\n2    11 2024-03-24T14:00:00+08:00\n3    11 2024-03-24T13:00:00+08:00\n4     9 2024-03-24T12:00:00+08:00\n5     6 2024-03-24T11:00:00+08:00\n6     3 2024-03-24T10:00:00+08:00\n7     1 2024-03-24T09:00:00+08:00\n8     0 2024-03-24T08:00:00+08:00\n9     0 2024-03-24T07:00:00+08:00\n\n\n\n# Display only the latest timestamp\n# Retrieve the UV index for the latest timestamp\nlatest_uvi &lt;- head(uvi(formatted_datetime), n = 1)\nprint(latest_uvi$value)\n\n[1] 10"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Temperature",
    "text": "Temperature\n\nMeanTemp_Year &lt;- Temp_YM %&gt;% \n  group_by(Year) %&gt;% \n  summarise(MeanTemp_Year = round(mean(MeanTemp, na.rm = TRUE), 1))\n\nTemp_YM &lt;- left_join(Temp_YM, MeanTemp_Year, by = c(\"Year\"))\n\nglimpse(Temp_YM)\n\nRows: 3,715\nColumns: 9\n$ Station       &lt;chr&gt; \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Adm…\n$ Region        &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"North\", \"N…\n$ Year          &lt;dbl&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 20…\n$ Month         &lt;ord&gt; Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, D…\n$ Date          &lt;date&gt; 2009-01-01, 2009-02-01, 2009-03-01, 2009-04-01, 2009-05…\n$ MeanTemp      &lt;dbl&gt; 26.3, 26.8, 26.9, 28.1, 28.5, 28.9, 28.1, 28.1, 28.3, 28…\n$ MaxTemp       &lt;dbl&gt; 31.9, 33.4, 34.5, 35.1, 34.7, 34.7, 33.7, 33.6, 34.3, 34…\n$ MinTemp       &lt;dbl&gt; 23.3, 23.0, 22.2, 23.7, 21.8, 23.7, 22.5, 22.7, 23.1, 22…\n$ MeanTemp_Year &lt;dbl&gt; 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27…\n\n\n\nggplot(Temp_YM, aes(x = Month, y = MeanTemp)) +\n  geom_point(aes(color = MeanTemp), alpha = 0.5, size = 4, show.legend = FALSE) +\n  scale_color_gradient(low = \"darkorange\", high = \"darkred\") +\n  geom_boxplot(aes(y = MeanTemp_Year), width = 0.8, color = \"darkgoldenrod1\") +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Mean Temperature, 1986-2023 \\nYear: {frame_time}', \n       x = 'Month', \n       y = 'Mean Temperature (°C)') +\n  transition_time(as.integer(Year)) + \n  ease_aes('linear') +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  guides(color = guide_legend(title = \"Average Temperature\", override.aes = list(color = \"grey\", linetype = \"dashed\"))) +\n  theme_hc()"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#rainfall",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#rainfall",
    "title": "Prototype - Time Series Analysis",
    "section": "Rainfall",
    "text": "Rainfall\n\nTotalRainfall_Year &lt;- Rainfall_YM %&gt;% \n  group_by(Year) %&gt;% \n  summarise(MeanRainfall_Year = round(mean(TotalRainfall, na.rm = TRUE), 1))\nRainfall_YM &lt;- left_join(Rainfall_YM, TotalRainfall_Year, by = c(\"Year\"))\nglimpse(Rainfall_YM)\n\nRows: 5,547\nColumns: 10\n$ Station           &lt;chr&gt; \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\", …\n$ Region            &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"North\"…\n$ Year              &lt;dbl&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009…\n$ Month             &lt;ord&gt; Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, No…\n$ Date              &lt;date&gt; 2009-01-01, 2009-02-01, 2009-03-01, 2009-04-01, 200…\n$ TotalRainfall     &lt;dbl&gt; 0.8, 148.0, 348.0, 148.8, 205.6, 92.0, 103.0, 90.2, …\n$ TotalRainfall30   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ TotalRainfall60   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ TotalRainfall120  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ MeanRainfall_Year &lt;dbl&gt; 172.5, 172.5, 172.5, 172.5, 172.5, 172.5, 172.5, 172…\n\n\n\nggplot(Rainfall_YM, aes(x = Month, y = TotalRainfall)) +\n  geom_point(aes(color = TotalRainfall), shape = 17, alpha = 0.5, size = 4, show.legend = FALSE) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkblue\") +\n  geom_boxplot(aes(y = MeanRainfall_Year), width = 0.8, color = \"cornflowerblue\") +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Total Rainfall, 1986-2023 \\nYear: {frame_time}', \n       x = 'Month', \n       y = 'Total Rainfall (mm)') +\n  transition_time(as.integer(Year)) + \n  ease_aes('linear') +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  guides(color = guide_legend(title = \"Total Rainfall\", override.aes = list(color = \"grey\", linetype = \"dashed\"))) +\n  theme_hc()"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#prototype-1",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#prototype-1",
    "title": "Prototype - Time Series Analysis",
    "section": "Prototype",
    "text": "Prototype\n\nTemperature\n\n\n\nRainfall"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#cycle-plot",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#cycle-plot",
    "title": "Prototype - Time Series Analysis",
    "section": "4.1 Cycle Plot",
    "text": "4.1 Cycle Plot\n\n# Selecting 5 years\nselection &lt;- c(1990, 1995, 2000, 2005, 2010, 2015, 2020)\n\n# Filtering the dataframe for the selected years\ncycle_input &lt;- Temp_YM %&gt;%\n  filter(Year %in% selection)\n\n# Define darker pastel colors\npalette &lt;- c(\"gold1\", \"orange2\", \"darkorange\", \"darkorange1\", \"tomato1\", \"tomato3\", \"tomato4\")\n\n# Plot with darker pastel colors\nggplot(data = cycle_input) +\n  geom_hline(data = cycle_input,\n             aes(yintercept = `MeanTemp_Year`),\n             color = \"black\",\n             alpha = 1.0,\n             size = 0.4) +\n  geom_line(aes(x = Month,\n                y = MeanTemp,\n                group = Year,\n                color = as.factor(Year),\n                alpha = 0.6)) +\n  geom_text(data = cycle_input,\n            aes(x = 1, y = MeanTemp_Year - 0.05, label = paste0(\"Mean: \", sprintf(\"%.1f\", MeanTemp_Year))),\n            hjust = -0.1, vjust = 0.5, color = \"black\", size = 3.5) +\n  facet_grid(~Year) + \n  labs(x = \"Month\",\n       y = \"Mean Temperature\") +\n  ggtitle(\"Temperature Change over 30 years\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.title = element_text(size = 10),\n        title = element_text(size =12),\n        axis.text.y = element_text(size = 8),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_color_manual(values = palette)\n\n\n\n\n\n# Filtering the dataframe for the selected years\ncycle_input &lt;- Rainfall_YM %&gt;%\n  filter(Year %in% selection)\n\n# Define darker pastel colors\npalette &lt;- c(\"steelblue1\", \"dodgerblue\", \"dodgerblue3\", \"royalblue3\", \"blue3\", \"blue4\", \"darkblue\")\n\n# Plot with darker pastel colors\nggplot(data = cycle_input) +\n  geom_hline(data = cycle_input,\n             aes(yintercept = `MeanRainfall_Year`),\n             color = \"black\",\n             alpha = 1.0,\n             size = 0.4) +\n  geom_line(aes(x = Month,\n                y = TotalRainfall,\n                group = Year,\n                color = as.factor(Year),\n                alpha = 0.6)) +\n  geom_text(data = cycle_input,\n            aes(x = 1, y = MeanRainfall_Year - 0.05, label = paste0(\"Mean: \", sprintf(\"%.1f\", MeanRainfall_Year))),\n            hjust = -0.1, vjust = 0.5, color = \"black\", size = 3.5) +\n  facet_grid(~Year) + \n  labs(x = \"Month\",\n       y = \"Total Rainfall\") +\n  ggtitle(\"Rainfall Change over 30 years\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.title = element_text(size = 10),\n        title = element_text(size =12),\n        axis.text.y = element_text(size = 8),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_color_manual(values = palette)\n\n\n\n\n\nTransformation to Shiny App\nUI\n\nUI(fluidPage(\n  \n  titlePanel(\"Temperature and Rainfall Analysis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"data\", \"Select Data:\",\n                  choices = c(\"Temperature\", \"Rainfall\")),\n      sliderInput(\"period\", \"Select Period:\",\n                  min = 1980, max = 2023, value = c(1990, 2020)),\n      selectInput(\"region\", \"Select Region:\",\n                  choices = c(\"Region A\", \"Region B\", \"Region C\")),\n      selectInput(\"station\", \"Select Station:\",\n                  choices = c(\"Station 1\", \"Station 2\", \"Station 3\"))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n))\n\nServer\n\nServer(function(input, output) {\n  \n  output$plot &lt;- renderPlot({\n    # Filter data based on user inputs\n    filtered_data &lt;- filter_data(input$data, input$period[1], input$period[2],\n                                 input$region, input$station)\n    \n    # Plotting based on filtered data\n    ggplot(filtered_data) +\n      geom_line(aes(x = Month, y = MeanTemp, group = Year, color = as.factor(Year)),\n                alpha = 0.6) +\n      labs(x = \"Month\", y = ifelse(input$data == \"Temperature\", \"Mean Temperature\", \"Total Rainfall\")) +\n      ggtitle(ifelse(input$data == \"Temperature\", \"Temperature Change over Time\", \"Rainfall over Time\")) +\n      theme_minimal()\n  })\n  \n  # Function to filter data based on user inputs\n  filter_data &lt;- function(data_type, start_year, end_year, region, station) {\n    # Your data filtering logic here based on user inputs\n    # For demonstration, let's assume you have a dataframe called \"data\"\n    # with columns: Month, Year, MeanTemp, TotalRainfall, Region, Station\n    \n    filtered_data &lt;- data %&gt;%\n      filter(Year &gt;= start_year, Year &lt;= end_year,\n             Region == region, Station == station)\n    \n    if (data_type == \"Temperature\") {\n      return(filtered_data %&gt;% select(Month, Year, MeanTemp))\n    } else {\n      return(filtered_data %&gt;% select(Month, Year, TotalRainfall))\n    }\n  }\n  \n})"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#slope-graph",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#slope-graph",
    "title": "Prototype - Time Series Analysis",
    "section": "4.2 Slope Graph",
    "text": "4.2 Slope Graph\n\nTemp_YM %&gt;% \n  mutate(Year = factor(Year), \n         Station = factor(Station)) %&gt;%\n  filter(Year %in% c(2017, 2023)) %&gt;%\n  newggslopegraph(Year, MeanTemp_Year, Station,\n                Title = \"Temperature\",\n                SubTitle = \"1983-2023\",\n                Caption = \"Taught by: Dr. Kam Tin Seong\")\n\n\n\n\n\nTemp_slope &lt;- Temp_YM %&gt;%\n  select(Station, Year, MeanTemp_Year) %&gt;%\n  distinct()\n\nTemp_slope &lt;- Temp_slope %&gt;%\n  mutate(Year = factor(Year))\n\nTemp_slope_filtered &lt;- Temp_slope %&gt;%\n  filter(Year %in% c(2017, 2023))\n\nslope_plot &lt;- newggslopegraph(data = Temp_slope_filtered,\n                              Year, MeanTemp_Year, Station,\n                              Title = \"Temperature\",\n                              SubTitle = \"2017-2023\",\n                              Caption = \"Taught by: Dr. Kam Tin Seong\")\n\nslope_plot + geom_text_repel(aes(label = Station), size = 3, box.padding = 0.5, max.overlaps = Inf)\n\n\n\n\n\nRainfall_YM %&gt;% \n  mutate(Year = factor(Year), \n         Station = factor(Station)) %&gt;%\n  filter(Year %in% c(2017, 2023)) %&gt;%\n  newggslopegraph(Year, MeanRainfall_Year, Station,\n                  Title = \"Rainfall\",\n                  SubTitle = \"1983-2023\",\n                  Caption = \"Taught by: Dr. Kam Tin Seong\")\n\n\n\n\n\nRainfall_slope &lt;- Rainfall_YM %&gt;%\n  select(Station, Year, MeanRainfall_Year) %&gt;%\n  distinct()\n\nRainfall_slope &lt;- Rainfall_slope %&gt;%\n  mutate(Year = factor(Year))\n\nRainfall_slope_filtered &lt;- Rainfall_slope %&gt;%\n  filter(Year %in% c(2017, 2023))\n\nslope_plot &lt;- newggslopegraph(data = Rainfall_slope_filtered,\n                              Year, MeanRainfall_Year, Station,\n                              Title = \"Rainfall\",\n                              SubTitle = \"2017-2023\",\n                              Caption = \"Taught by: Dr. Kam Tin Seong\")\n\nslope_plot + geom_text_repel(aes(label = Station), size = 3, box.padding = 0.5, max.overlaps = Inf)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#horizon-graph",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#horizon-graph",
    "title": "Prototype - Time Series Analysis",
    "section": "4.3 Horizon Graph",
    "text": "4.3 Horizon Graph\n\nggplot(Temp_YM) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()) +\n  ggtitle('Temperature')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nTemp_YM_filtered &lt;- Temp_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Temp_YM_filtered) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'none',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Temperature, 2010-2023')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nTemp_YM_filtered &lt;- Temp_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Temp_YM_filtered) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Region`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'none',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Temperature, 2010-2023')\n\n\n\n\n\nggplot(Rainfall_YM) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()) +\n  ggtitle('Rainfall')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nRainfall_YM_filtered &lt;- Rainfall_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Rainfall_YM_filtered) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'right',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Rainfall, 2010-2023')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nRainfall_YM_filtered &lt;- Rainfall_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Rainfall_YM_filtered) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Region`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'right',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Rainfall, 2010-2023')\n\n\n\n\n\nTranformation to Shiny App\n\nUI(fluidPage(\n  \n  titlePanel(\"Temperature and Rainfall Analysis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"data\", \"Select Data:\",\n                  choices = c(\"Temperature\", \"Rainfall\")),\n      sliderInput(\"period\", \"Select Period:\",\n                  min = 1980, max = 2023, value = c(2010, 2023)),\n      selectInput(\"region\", \"Select Region:\",\n                  choices = c(\"Region A\", \"Region B\", \"Region C\")),\n      selectInput(\"station\", \"Select Station:\",\n                  choices = c(\"Station 1\", \"Station 2\", \"Station 3\"))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n))\n\n\nServer(function(input, output) {\n  \n  output$plot &lt;- renderPlot({\n    # Filter data based on user inputs\n    filtered_data &lt;- filter_data(input$data, input$period[1], input$period[2],\n                                 input$region, input$station)\n    \n    # Plotting based on filtered data\n    ggplot(filtered_data) +\n      geom_horizon(aes(x = Date, y = MeanTemp),\n                   origin = \"midpoint\",\n                   horizonscale = 6) +\n      facet_grid(Station ~ .) +\n      theme_few() +\n      scale_fill_hcl(palette = 'RdBu') +\n      theme(panel.spacing.y = unit(0, \"lines\"),\n            strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n            legend.position = 'none',\n            axis.text.y = element_blank(),\n            axis.text.x = element_text(size = 7),\n            axis.title.y = element_blank(),\n            axis.title.x = element_blank(),\n            axis.ticks.y = element_blank(),\n            panel.border = element_blank()) +\n      ggtitle(paste(input$data, \"(\", input$period[1], \"-\", input$period[2], \")\"))\n  })\n  \n  # Function to filter data based on user inputs\n  filter_data &lt;- function(data_type, start_year, end_year, region, station) {\n    \n    Temp_YM_filtered &lt;- Temp_YM %&gt;%\n      filter(Year &gt;= start_year, Year &lt;= end_year,\n             Region == region, Station == station)\n    \n    if (data_type == \"Temperature\") {\n      return(Temp_YM_filtered)\n    }\n    }\n  }\n)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#boxplot",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#boxplot",
    "title": "Prototype - Time Series Analysis",
    "section": "4.4 Boxplot",
    "text": "4.4 Boxplot\n\nTemp_YM$mean_tooltip &lt;- c(paste0(\"Year: \", Temp_YM$Year,\n                                   \"\\n Station: \", Temp_YM$Station,\n                                   \"\\n Mean Temp: \", Temp_YM$MeanTemp, \"°C\"))\n\nline &lt;- ggplot(data = Temp_YM,\n               aes(x = Year, y = MeanTemp, group = Station, color = Station, data_id = Station)) +\n  geom_line_interactive(size = 1.2, alpha = 0.4) +\n  geom_point_interactive(aes(tooltip = Temp_YM$mean_tooltip),\n                         fill = \"white\", size = 1, stroke = 1, shape = 21) +\n  theme_classic() +\n  ylab(\"Annual Mean Temperature (°C)\") +\n  xlab(\"Year\") +\n  ggtitle(\"Annual Average of Mean Temperatures\") +\n  theme(plot.title = element_text(size = 10),\n        plot.subtitle = element_text(size = 8)) \n\ngirafe(ggobj = line, width_svg = 8, height_svg = 6 * 0.618,\n       options = list(opts_hover(css = \"stroke-width: 2.5; opacity: 1;\"),\n                      opts_hover_inv(css = \"stroke-width: 1;opacity:0.6;\")))\n\n\n\n\n\n\nTranformation to Shiny App\nUI\n\nui &lt;- fluidPage(\n  titlePanel(\"Interactive Temperature Graph\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"station\", \"Select Station:\", choices = unique(Temp_YM$Station)),\n      sliderInput(\"year\", \"Select Year:\", min = min(Temp_YM$Year), max = max(Temp_YM$Year),\n                  value = c(min(Temp_YM$Year), max(Temp_YM$Year)), step = 1)\n    ),\n    \n    mainPanel(\n      plotlyOutput(\"temperature_plot\")\n    )\n  )\n)\n\nServer\n\nfunction(input, output) {\n  filtered_data &lt;- reactive({\n    temp_year %&gt;%\n      filter(Station == input$station & Year &gt;= input$year[1] & Year &lt;= input$year[2])\n    })\n  \n  output$temperature_plot &lt;- renderPlotly({\n    ggplot(data = filtered_data(), aes(x = Year, y = MeanTemp, group = Station, color = Station)) +\n      geom_line(size = 1.2, alpha = 0.4) +\n      geom_point(aes(text = mean_tooltip), fill = \"white\", size = 3, shape = 21) +\n      theme_classic() +\n      xlab(\"Year\") +\n      ylab(\"Annual Mean Temperature (°C)\") +\n      ggtitle(\"Annual Average of Mean Temperatures\") +\n      theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 8))\n    \n    ggplotly(gg, tooltip = \"text\")\n  })\n}"
  },
  {
    "objectID": "Station/data/geospatial/MPSZ-2019.html",
    "href": "Station/data/geospatial/MPSZ-2019.html",
    "title": "The Heat is On!",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  }
]