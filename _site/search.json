[
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html",
    "title": "Prototype - Time Series Analysis",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggiraph, reshape, ggthemes, \n               gganimate, plotly, scales, ggHoriPlot, ggrepel,\n               CGPfunctions, ggTimeSeries, datagovsgR, neaSG)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#prototype",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#prototype",
    "title": "Prototype - Time Series Analysis",
    "section": "Prototype",
    "text": "Prototype"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#total-stations",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#total-stations",
    "title": "Prototype - Time Series Analysis",
    "section": "Total Stations",
    "text": "Total Stations\n\nstation_count &lt;- Temp_YM %&gt;%\n  summarise(Station_Count = n_distinct(Station))\nstation_count\n\n# A tibble: 1 × 1\n  Station_Count\n          &lt;int&gt;\n1            18"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#mean-temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#mean-temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Mean Temperature",
    "text": "Mean Temperature\n\nmean_temperature &lt;- Temp_YM %&gt;%\n  summarise(Mean_Temperature = round(mean(MeanTemp, na.rm = TRUE), 1))\nmean_temperature\n\n# A tibble: 1 × 1\n  Mean_Temperature\n             &lt;dbl&gt;\n1             27.7"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#weather-forecast",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#weather-forecast",
    "title": "Prototype - Time Series Analysis",
    "section": "Weather Forecast",
    "text": "Weather Forecast\nThis functions calls upon the weather forecast API from data.gov.sg and returns a data frame con- taining different metrics of the forecast. 2-hour, 24-hour and 4-day forecasts are availible. This data provided by the API is updated half-hourly.\n\ncurrent_time &lt;- Sys.time()\nformatted_date &lt;- format(current_time, \"%Y-%m-%d\")\nformatted_time &lt;- format(current_time, \"%H:%M:%S\")\nformatted_datetime &lt;- paste(formatted_date, formatted_time, sep = \"T\")\n\n\nweather_forecast(formatted_datetime)\n\n                      area forecast\n1               Ang Mo Kio   Cloudy\n2                    Bedok   Cloudy\n3                   Bishan   Cloudy\n4                 Boon Lay   Cloudy\n5              Bukit Batok   Cloudy\n6              Bukit Merah   Cloudy\n7            Bukit Panjang   Cloudy\n8              Bukit Timah   Cloudy\n9  Central Water Catchment   Cloudy\n10                  Changi   Cloudy\n11           Choa Chu Kang   Cloudy\n12                Clementi   Cloudy\n13                    City   Cloudy\n14                 Geylang   Cloudy\n15                 Hougang   Cloudy\n16             Jalan Bahar   Cloudy\n17             Jurong East   Cloudy\n18           Jurong Island   Cloudy\n19             Jurong West   Cloudy\n20                 Kallang   Cloudy\n21            Lim Chu Kang   Cloudy\n22                  Mandai   Cloudy\n23           Marine Parade   Cloudy\n24                  Novena   Cloudy\n25               Pasir Ris   Cloudy\n26              Paya Lebar   Cloudy\n27                 Pioneer   Cloudy\n28            Pulau Tekong   Cloudy\n29              Pulau Ubin   Cloudy\n30                 Punggol   Cloudy\n31              Queenstown   Cloudy\n32                 Seletar   Cloudy\n33               Sembawang   Cloudy\n34                Sengkang   Cloudy\n35                 Sentosa   Cloudy\n36               Serangoon   Cloudy\n37        Southern Islands   Cloudy\n38            Sungei Kadut   Cloudy\n39                Tampines   Cloudy\n40                 Tanglin   Cloudy\n41                  Tengah   Cloudy\n42               Toa Payoh   Cloudy\n43                    Tuas   Cloudy\n44         Western Islands   Cloudy\n45 Western Water Catchment   Cloudy\n46               Woodlands   Cloudy\n47                  Yishun   Cloudy"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#air-temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#air-temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Air Temperature",
    "text": "Air Temperature\n\nget_airtemp(formatted_date, formatted_date)\n\n[1] \"2024-04-01\"\n[1] \"2024-04-01\"\n\n\n                      timestamp readings.station_id readings.value\n                         &lt;char&gt;              &lt;char&gt;          &lt;num&gt;\n   1: 2024-04-01T00:01:00+08:00                S109           28.0\n   2: 2024-04-01T00:02:00+08:00                S109           28.0\n   3: 2024-04-01T00:03:00+08:00                S109           28.0\n   4: 2024-04-01T00:04:00+08:00                S109           28.0\n   5: 2024-04-01T00:05:00+08:00                S109           28.0\n  ---                                                             \n1410: 2024-04-01T23:31:00+08:00                S109           28.8\n1411: 2024-04-01T23:32:00+08:00                S109           28.7\n1412: 2024-04-01T23:33:00+08:00                S109           28.7\n1413: 2024-04-01T23:34:00+08:00                S109           28.7\n1414: 2024-04-01T23:35:00+08:00                 S43           29.4\n      readings.station_id.1 readings.value.1 readings.station_id.2\n                     &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n   1:                  S117             28.8                   S50\n   2:                  S117             28.8                   S50\n   3:                  S117             28.8                   S50\n   4:                  S117             28.8                   S50\n   5:                  S117             28.8                   S50\n  ---                                                             \n1410:                  S117             29.2                   S50\n1411:                  S117             29.2                   S50\n1412:                  S117             29.2                   S50\n1413:                  S117             29.2                   S50\n1414:                   S44             29.2                  S111\n      readings.value.2 readings.station_id.3 readings.value.3\n                 &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n   1:             27.6                  S107             29.3\n   2:             27.6                  S107             29.3\n   3:             27.6                  S107             29.4\n   4:             27.5                  S107             29.4\n   5:             27.5                  S107             29.4\n  ---                                                        \n1410:             28.4                  S107             29.4\n1411:             28.4                  S107             29.4\n1412:             28.4                  S107             29.4\n1413:             28.4                  S107             29.4\n1414:             28.4                  S115             29.4\n      readings.station_id.4 readings.value.4 readings.station_id.5\n                     &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n   1:                   S43             28.8                   S44\n   2:                   S43             28.7                   S44\n   3:                   S43             28.7                   S44\n   4:                   S43             28.8                   S44\n   5:                   S43             28.8                   S44\n  ---                                                             \n1410:                   S44             29.2                  S121\n1411:                   S43             29.4                   S44\n1412:                   S43             29.4                   S44\n1413:                   S43             29.4                   S44\n1414:                  &lt;NA&gt;               NA                  &lt;NA&gt;\n      readings.value.5 readings.station_id.6 readings.value.6\n                 &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n   1:             27.4                  S121             27.1\n   2:             27.4                  S121             27.0\n   3:             27.4                  S121             27.1\n   4:             27.4                  S121             27.1\n   5:             27.4                  S121             27.0\n  ---                                                        \n1410:             28.6                  S111             28.4\n1411:             29.2                  S121             28.6\n1412:             29.2                  S121             28.6\n1413:             29.2                  S121             28.6\n1414:               NA                  &lt;NA&gt;               NA\n      readings.station_id.7 readings.value.7 readings.station_id.8\n                     &lt;char&gt;            &lt;num&gt;                &lt;char&gt;\n   1:                  S111             28.1                   S24\n   2:                  S111             28.1                   S24\n   3:                  S111             28.1                  S115\n   4:                  S111             28.1                  S115\n   5:                  S111             28.1                  S115\n  ---                                                             \n1410:                   S60             29.1                   S24\n1411:                  S111             28.4                   S60\n1412:                  S111             28.4                   S60\n1413:                  S111             28.4                   S60\n1414:                  &lt;NA&gt;               NA                  &lt;NA&gt;\n      readings.value.8 readings.station_id.9 readings.value.9\n                 &lt;num&gt;                &lt;char&gt;            &lt;num&gt;\n   1:             28.2                  S116             28.8\n   2:             28.2                  S116             28.8\n   3:             28.8                   S24             28.2\n   4:             28.7                   S24             28.2\n   5:             28.7                   S24             28.2\n  ---                                                        \n1410:             29.2                  S116             29.2\n1411:             29.1                   S24             29.1\n1412:             29.1                  S115             29.5\n1413:             29.1                  S115             29.5\n1414:               NA                  &lt;NA&gt;               NA\n      readings.station_id.10 readings.value.10 readings.station_id.11\n                      &lt;char&gt;             &lt;num&gt;                 &lt;char&gt;\n   1:                   S104              27.3                   &lt;NA&gt;\n   2:                   S104              27.3                   &lt;NA&gt;\n   3:                   S116              28.8                   S104\n   4:                   S116              28.7                   S104\n   5:                   S116              28.7                   S104\n  ---                                                                \n1410:                   S104              28.8                   &lt;NA&gt;\n1411:                   S116              29.2                   S104\n1412:                    S24              29.1                   S116\n1413:                    S24              29.1                   S116\n1414:                   &lt;NA&gt;                NA                   &lt;NA&gt;\n      readings.value.11 readings.station_id.12 readings.value.12\n                  &lt;num&gt;                 &lt;char&gt;             &lt;num&gt;\n   1:                NA                   &lt;NA&gt;                NA\n   2:                NA                   &lt;NA&gt;                NA\n   3:              27.3                   &lt;NA&gt;                NA\n   4:              27.3                   &lt;NA&gt;                NA\n   5:              27.2                   &lt;NA&gt;                NA\n  ---                                                           \n1410:                NA                   &lt;NA&gt;                NA\n1411:              28.8                   &lt;NA&gt;                NA\n1412:              29.2                   S104              28.8\n1413:              29.2                   S104              28.7\n1414:                NA                   &lt;NA&gt;                NA\n\n\n\nlatest_airtemp &lt;- head(get_airtemp(formatted_date, formatted_date), n = 1)\n\n[1] \"2024-04-01\"\n[1] \"2024-04-01\"\n\ncolumn_names &lt;- paste0(\"readings.value.\", 1:12)\nvalues &lt;- sapply(column_names, function(col) latest_airtemp[[col]])\naverage_value &lt;- mean(values, na.rm = TRUE)\nprint(average_value)\n\n[1] 28.14"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#ultra-violet-index",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#ultra-violet-index",
    "title": "Prototype - Time Series Analysis",
    "section": "Ultra-violet Index",
    "text": "Ultra-violet Index\nThis functions calls upon the UVI API from data.gov.sg and returns a data frame of the different measures of the UVI across Singapore and returns the closest UVI value presently and for the past few hours. This data provided by the API is updated hourly.\n\nuvi(formatted_datetime)\n\n   value                 timestamp\n1      0 2024-04-01T19:00:00+08:00\n2      1 2024-04-01T18:00:00+08:00\n3      3 2024-04-01T17:00:00+08:00\n4      5 2024-04-01T16:00:00+08:00\n5      6 2024-04-01T15:00:00+08:00\n6      8 2024-04-01T14:00:00+08:00\n7      7 2024-04-01T13:00:00+08:00\n8      6 2024-04-01T12:00:00+08:00\n9      4 2024-04-01T11:00:00+08:00\n10     2 2024-04-01T10:00:00+08:00\n11     1 2024-04-01T09:00:00+08:00\n12     0 2024-04-01T08:00:00+08:00\n13     0 2024-04-01T07:00:00+08:00\n\n\n\n# Display only the latest timestamp\n# Retrieve the UV index for the latest timestamp\nlatest_uvi &lt;- head(uvi(formatted_datetime), n = 1)\nprint(latest_uvi$value)\n\n[1] 0"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#temperature",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#temperature",
    "title": "Prototype - Time Series Analysis",
    "section": "Temperature",
    "text": "Temperature\n\nMeanTemp_Year &lt;- Temp_YM %&gt;% \n  group_by(Year) %&gt;% \n  summarise(MeanTemp_Year = round(mean(MeanTemp, na.rm = TRUE), 1))\n\nTemp_YM &lt;- left_join(Temp_YM, MeanTemp_Year, by = c(\"Year\"))\n\nglimpse(Temp_YM)\n\nRows: 3,715\nColumns: 9\n$ Station       &lt;chr&gt; \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Adm…\n$ Region        &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"North\", \"N…\n$ Year          &lt;dbl&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 20…\n$ Month         &lt;ord&gt; Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, D…\n$ Date          &lt;date&gt; 2009-01-01, 2009-02-01, 2009-03-01, 2009-04-01, 2009-05…\n$ MeanTemp      &lt;dbl&gt; 26.3, 26.8, 26.9, 28.1, 28.5, 28.9, 28.1, 28.1, 28.3, 28…\n$ MaxTemp       &lt;dbl&gt; 31.9, 33.4, 34.5, 35.1, 34.7, 34.7, 33.7, 33.6, 34.3, 34…\n$ MinTemp       &lt;dbl&gt; 23.3, 23.0, 22.2, 23.7, 21.8, 23.7, 22.5, 22.7, 23.1, 22…\n$ MeanTemp_Year &lt;dbl&gt; 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27.6, 27…\n\n\n\nggplot(Temp_YM, aes(x = Month, y = MeanTemp)) +\n  geom_point(aes(color = MeanTemp), alpha = 0.5, size = 4, show.legend = FALSE) +\n  scale_color_gradient(low = \"darkorange\", high = \"darkred\") +\n  geom_boxplot(aes(y = MeanTemp_Year), width = 0.8, color = \"darkgoldenrod1\") +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Mean Temperature, 1986-2023 \\nYear: {frame_time}', \n       x = 'Month', \n       y = 'Mean Temperature (°C)') +\n  transition_time(as.integer(Year)) + \n  ease_aes('linear') +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  guides(color = guide_legend(title = \"Average Temperature\", override.aes = list(color = \"grey\", linetype = \"dashed\"))) +\n  theme_hc()"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#rainfall",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#rainfall",
    "title": "Prototype - Time Series Analysis",
    "section": "Rainfall",
    "text": "Rainfall\n\nTotalRainfall_Year &lt;- Rainfall_YM %&gt;% \n  group_by(Year) %&gt;% \n  summarise(MeanRainfall_Year = round(mean(TotalRainfall, na.rm = TRUE), 1))\nRainfall_YM &lt;- left_join(Rainfall_YM, TotalRainfall_Year, by = c(\"Year\"))\nglimpse(Rainfall_YM)\n\nRows: 5,547\nColumns: 10\n$ Station           &lt;chr&gt; \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\", …\n$ Region            &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"North\"…\n$ Year              &lt;dbl&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009…\n$ Month             &lt;ord&gt; Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, No…\n$ Date              &lt;date&gt; 2009-01-01, 2009-02-01, 2009-03-01, 2009-04-01, 200…\n$ TotalRainfall     &lt;dbl&gt; 0.8, 148.0, 348.0, 148.8, 205.6, 92.0, 103.0, 90.2, …\n$ TotalRainfall30   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ TotalRainfall60   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ TotalRainfall120  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ MeanRainfall_Year &lt;dbl&gt; 172.5, 172.5, 172.5, 172.5, 172.5, 172.5, 172.5, 172…\n\n\n\nggplot(Rainfall_YM, aes(x = Month, y = TotalRainfall)) +\n  geom_point(aes(color = TotalRainfall), shape = 17, alpha = 0.5, size = 4, show.legend = FALSE) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkblue\") +\n  geom_boxplot(aes(y = MeanRainfall_Year), width = 0.8, color = \"cornflowerblue\") +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Total Rainfall, 1986-2023 \\nYear: {frame_time}', \n       x = 'Month', \n       y = 'Total Rainfall (mm)') +\n  transition_time(as.integer(Year)) + \n  ease_aes('linear') +\n  theme(legend.position = \"right\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  guides(color = guide_legend(title = \"Total Rainfall\", override.aes = list(color = \"grey\", linetype = \"dashed\"))) +\n  theme_hc()"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#prototype-1",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#prototype-1",
    "title": "Prototype - Time Series Analysis",
    "section": "Prototype",
    "text": "Prototype\n\nTemperature\n\n\n\nRainfall"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#cycle-plot",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#cycle-plot",
    "title": "Prototype - Time Series Analysis",
    "section": "4.1 Cycle Plot",
    "text": "4.1 Cycle Plot\n\n# Selecting 5 years\nselection &lt;- c(1990, 1995, 2000, 2005, 2010, 2015, 2020)\n\n# Filtering the dataframe for the selected years\ncycle_input &lt;- Temp_YM %&gt;%\n  filter(Year %in% selection)\n\n# Define darker pastel colors\npalette &lt;- c(\"gold1\", \"orange2\", \"darkorange\", \"darkorange1\", \"tomato1\", \"tomato3\", \"tomato4\")\n\n# Plot with darker pastel colors\nggplot(data = cycle_input) +\n  geom_hline(data = cycle_input,\n             aes(yintercept = `MeanTemp_Year`),\n             color = \"black\",\n             alpha = 1.0,\n             size = 0.4) +\n  geom_line(aes(x = Month,\n                y = MeanTemp,\n                group = Year,\n                color = as.factor(Year),\n                alpha = 0.6)) +\n  geom_text(data = cycle_input,\n            aes(x = 1, y = MeanTemp_Year - 0.05, label = paste0(\"Mean: \", sprintf(\"%.1f\", MeanTemp_Year))),\n            hjust = -0.1, vjust = 0.5, color = \"black\", size = 3.5) +\n  facet_grid(~Year) + \n  labs(x = \"Month\",\n       y = \"Mean Temperature\") +\n  ggtitle(\"Temperature Change over 30 years\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.title = element_text(size = 10),\n        title = element_text(size =12),\n        axis.text.y = element_text(size = 8),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_color_manual(values = palette)\n\n\n\n\n\n# Filtering the dataframe for the selected years\ncycle_input &lt;- Rainfall_YM %&gt;%\n  filter(Year %in% selection)\n\n# Define darker pastel colors\npalette &lt;- c(\"steelblue1\", \"dodgerblue\", \"dodgerblue3\", \"royalblue3\", \"blue3\", \"blue4\", \"darkblue\")\n\n# Plot with darker pastel colors\nggplot(data = cycle_input) +\n  geom_hline(data = cycle_input,\n             aes(yintercept = `MeanRainfall_Year`),\n             color = \"black\",\n             alpha = 1.0,\n             size = 0.4) +\n  geom_line(aes(x = Month,\n                y = TotalRainfall,\n                group = Year,\n                color = as.factor(Year),\n                alpha = 0.6)) +\n  geom_text(data = cycle_input,\n            aes(x = 1, y = MeanRainfall_Year - 0.05, label = paste0(\"Mean: \", sprintf(\"%.1f\", MeanRainfall_Year))),\n            hjust = -0.1, vjust = 0.5, color = \"black\", size = 3.5) +\n  facet_grid(~Year) + \n  labs(x = \"Month\",\n       y = \"Total Rainfall\") +\n  ggtitle(\"Rainfall Change over 30 years\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.title = element_text(size = 10),\n        title = element_text(size =12),\n        axis.text.y = element_text(size = 8),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  scale_color_manual(values = palette)\n\n\n\n\n\nTransformation to Shiny App\nUI\n\nUI(fluidPage(\n  \n  titlePanel(\"Temperature and Rainfall Analysis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"data\", \"Select Data:\",\n                  choices = c(\"Temperature\", \"Rainfall\")),\n      sliderInput(\"period\", \"Select Period:\",\n                  min = 1980, max = 2023, value = c(1990, 2020)),\n      selectInput(\"region\", \"Select Region:\",\n                  choices = c(\"Region A\", \"Region B\", \"Region C\")),\n      selectInput(\"station\", \"Select Station:\",\n                  choices = c(\"Station 1\", \"Station 2\", \"Station 3\"))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n))\n\nServer\n\nServer(function(input, output) {\n  \n  output$plot &lt;- renderPlot({\n    # Filter data based on user inputs\n    filtered_data &lt;- filter_data(input$data, input$period[1], input$period[2],\n                                 input$region, input$station)\n    \n    # Plotting based on filtered data\n    ggplot(filtered_data) +\n      geom_line(aes(x = Month, y = MeanTemp, group = Year, color = as.factor(Year)),\n                alpha = 0.6) +\n      labs(x = \"Month\", y = ifelse(input$data == \"Temperature\", \"Mean Temperature\", \"Total Rainfall\")) +\n      ggtitle(ifelse(input$data == \"Temperature\", \"Temperature Change over Time\", \"Rainfall over Time\")) +\n      theme_minimal()\n  })\n  \n  # Function to filter data based on user inputs\n  filter_data &lt;- function(data_type, start_year, end_year, region, station) {\n    # Your data filtering logic here based on user inputs\n    # For demonstration, let's assume you have a dataframe called \"data\"\n    # with columns: Month, Year, MeanTemp, TotalRainfall, Region, Station\n    \n    filtered_data &lt;- data %&gt;%\n      filter(Year &gt;= start_year, Year &lt;= end_year,\n             Region == region, Station == station)\n    \n    if (data_type == \"Temperature\") {\n      return(filtered_data %&gt;% select(Month, Year, MeanTemp))\n    } else {\n      return(filtered_data %&gt;% select(Month, Year, TotalRainfall))\n    }\n  }\n  \n})"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#slope-graph",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#slope-graph",
    "title": "Prototype - Time Series Analysis",
    "section": "4.2 Slope Graph",
    "text": "4.2 Slope Graph\n\nTemp_YM %&gt;% \n  mutate(Year = factor(Year), \n         Station = factor(Station)) %&gt;%\n  filter(Year %in% c(2017, 2023)) %&gt;%\n  newggslopegraph(Year, MeanTemp_Year, Station,\n                Title = \"Temperature\",\n                SubTitle = \"1983-2023\",\n                Caption = \"Taught by: Dr. Kam Tin Seong\")\n\n\n\n\n\nTemp_slope &lt;- Temp_YM %&gt;%\n  select(Station, Year, MeanTemp_Year) %&gt;%\n  distinct()\n\nTemp_slope &lt;- Temp_slope %&gt;%\n  mutate(Year = factor(Year))\n\nTemp_slope_filtered &lt;- Temp_slope %&gt;%\n  filter(Year %in% c(2017, 2023))\n\nslope_plot &lt;- newggslopegraph(data = Temp_slope_filtered,\n                              Year, MeanTemp_Year, Station,\n                              Title = \"Temperature\",\n                              SubTitle = \"2017-2023\",\n                              Caption = \"Taught by: Dr. Kam Tin Seong\")\n\nslope_plot + geom_text_repel(aes(label = Station), size = 3, box.padding = 0.5, max.overlaps = Inf)\n\n\n\n\n\nRainfall_YM %&gt;% \n  mutate(Year = factor(Year), \n         Station = factor(Station)) %&gt;%\n  filter(Year %in% c(2017, 2023)) %&gt;%\n  newggslopegraph(Year, MeanRainfall_Year, Station,\n                  Title = \"Rainfall\",\n                  SubTitle = \"1983-2023\",\n                  Caption = \"Taught by: Dr. Kam Tin Seong\")\n\n\n\n\n\nRainfall_slope &lt;- Rainfall_YM %&gt;%\n  select(Station, Year, MeanRainfall_Year) %&gt;%\n  distinct()\n\nRainfall_slope &lt;- Rainfall_slope %&gt;%\n  mutate(Year = factor(Year))\n\nRainfall_slope_filtered &lt;- Rainfall_slope %&gt;%\n  filter(Year %in% c(2017, 2023))\n\nslope_plot &lt;- newggslopegraph(data = Rainfall_slope_filtered,\n                              Year, MeanRainfall_Year, Station,\n                              Title = \"Rainfall\",\n                              SubTitle = \"2017-2023\",\n                              Caption = \"Taught by: Dr. Kam Tin Seong\")\n\nslope_plot + geom_text_repel(aes(label = Station), size = 3, box.padding = 0.5, max.overlaps = Inf)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#horizon-graph",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#horizon-graph",
    "title": "Prototype - Time Series Analysis",
    "section": "4.3 Horizon Graph",
    "text": "4.3 Horizon Graph\n\nggplot(Temp_YM) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()) +\n  ggtitle('Temperature')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nTemp_YM_filtered &lt;- Temp_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Temp_YM_filtered) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'none',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Temperature, 2010-2023')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nTemp_YM_filtered &lt;- Temp_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Temp_YM_filtered) +\n  geom_horizon(aes(x = Date, y = MeanTemp),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Region`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'none',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Temperature, 2010-2023')\n\n\n\n\n\nggplot(Rainfall_YM) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()) +\n  ggtitle('Rainfall')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nRainfall_YM_filtered &lt;- Rainfall_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Rainfall_YM_filtered) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Station`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'right',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Rainfall, 2010-2023')\n\n\n\n\n\n# Filter data for years 2010 to 2023\nRainfall_YM_filtered &lt;- Rainfall_YM %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2023)\n\n# Plot the filtered data\nggplot(Rainfall_YM_filtered) +\n  geom_horizon(aes(x = Date, y = TotalRainfall),\n               origin = \"midpoint\",\n               horizonscale = 6) +\n  facet_grid(`Region`~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y = unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n        legend.position = 'right',\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 7),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.border = element_blank()) +\n  ggtitle('Rainfall, 2010-2023')\n\n\n\n\n\nTranformation to Shiny App\n\nUI(fluidPage(\n  \n  titlePanel(\"Temperature and Rainfall Analysis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"data\", \"Select Data:\",\n                  choices = c(\"Temperature\", \"Rainfall\")),\n      sliderInput(\"period\", \"Select Period:\",\n                  min = 1980, max = 2023, value = c(2010, 2023)),\n      selectInput(\"region\", \"Select Region:\",\n                  choices = c(\"Region A\", \"Region B\", \"Region C\")),\n      selectInput(\"station\", \"Select Station:\",\n                  choices = c(\"Station 1\", \"Station 2\", \"Station 3\"))\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n))\n\n\nServer(function(input, output) {\n  \n  output$plot &lt;- renderPlot({\n    # Filter data based on user inputs\n    filtered_data &lt;- filter_data(input$data, input$period[1], input$period[2],\n                                 input$region, input$station)\n    \n    # Plotting based on filtered data\n    ggplot(filtered_data) +\n      geom_horizon(aes(x = Date, y = MeanTemp),\n                   origin = \"midpoint\",\n                   horizonscale = 6) +\n      facet_grid(Station ~ .) +\n      theme_few() +\n      scale_fill_hcl(palette = 'RdBu') +\n      theme(panel.spacing.y = unit(0, \"lines\"),\n            strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n            legend.position = 'none',\n            axis.text.y = element_blank(),\n            axis.text.x = element_text(size = 7),\n            axis.title.y = element_blank(),\n            axis.title.x = element_blank(),\n            axis.ticks.y = element_blank(),\n            panel.border = element_blank()) +\n      ggtitle(paste(input$data, \"(\", input$period[1], \"-\", input$period[2], \")\"))\n  })\n  \n  # Function to filter data based on user inputs\n  filter_data &lt;- function(data_type, start_year, end_year, region, station) {\n    \n    Temp_YM_filtered &lt;- Temp_YM %&gt;%\n      filter(Year &gt;= start_year, Year &lt;= end_year,\n             Region == region, Station == station)\n    \n    if (data_type == \"Temperature\") {\n      return(Temp_YM_filtered)\n    }\n    }\n  }\n)"
  },
  {
    "objectID": "Prototype/EDA-TimeSeriesAnalysis.html#boxplot",
    "href": "Prototype/EDA-TimeSeriesAnalysis.html#boxplot",
    "title": "Prototype - Time Series Analysis",
    "section": "4.4 Boxplot",
    "text": "4.4 Boxplot\n\nTemp_YM$mean_tooltip &lt;- c(paste0(\"Year: \", Temp_YM$Year,\n                                   \"\\n Station: \", Temp_YM$Station,\n                                   \"\\n Mean Temp: \", Temp_YM$MeanTemp, \"°C\"))\n\nline &lt;- ggplot(data = Temp_YM,\n               aes(x = Year, y = MeanTemp, group = Station, color = Station, data_id = Station)) +\n  geom_line_interactive(size = 1.2, alpha = 0.4) +\n  geom_point_interactive(aes(tooltip = Temp_YM$mean_tooltip),\n                         fill = \"white\", size = 1, stroke = 1, shape = 21) +\n  theme_classic() +\n  ylab(\"Annual Mean Temperature (°C)\") +\n  xlab(\"Year\") +\n  ggtitle(\"Annual Average of Mean Temperatures\") +\n  theme(plot.title = element_text(size = 10),\n        plot.subtitle = element_text(size = 8)) \n\ngirafe(ggobj = line, width_svg = 8, height_svg = 6 * 0.618,\n       options = list(opts_hover(css = \"stroke-width: 2.5; opacity: 1;\"),\n                      opts_hover_inv(css = \"stroke-width: 1;opacity:0.6;\")))\n\n\n\n\n\n\nTranformation to Shiny App\nUI\n\nui &lt;- fluidPage(\n  titlePanel(\"Interactive Temperature Graph\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"station\", \"Select Station:\", choices = unique(Temp_YM$Station)),\n      sliderInput(\"year\", \"Select Year:\", min = min(Temp_YM$Year), max = max(Temp_YM$Year),\n                  value = c(min(Temp_YM$Year), max(Temp_YM$Year)), step = 1)\n    ),\n    \n    mainPanel(\n      plotlyOutput(\"temperature_plot\")\n    )\n  )\n)\n\nServer\n\nfunction(input, output) {\n  filtered_data &lt;- reactive({\n    temp_year %&gt;%\n      filter(Station == input$station & Year &gt;= input$year[1] & Year &lt;= input$year[2])\n    })\n  \n  output$temperature_plot &lt;- renderPlotly({\n    ggplot(data = filtered_data(), aes(x = Year, y = MeanTemp, group = Station, color = Station)) +\n      geom_line(size = 1.2, alpha = 0.4) +\n      geom_point(aes(text = mean_tooltip), fill = \"white\", size = 3, shape = 21) +\n      theme_classic() +\n      xlab(\"Year\") +\n      ylab(\"Annual Mean Temperature (°C)\") +\n      ggtitle(\"Annual Average of Mean Temperatures\") +\n      theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 8))\n    \n    ggplotly(gg, tooltip = \"text\")\n  })\n}"
  },
  {
    "objectID": "Station/data/geospatial/MPSZ-2019.html",
    "href": "Station/data/geospatial/MPSZ-2019.html",
    "title": "<img src='images/logo.png'/>",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Prototype/Forecast.html",
    "href": "Prototype/Forecast.html",
    "title": "Prototype: Time Series Forecasting",
    "section": "",
    "text": "The code below uses p_load() of the Pacman package to check if all the required packages are installed on the laptop. If they are, then they will be launched into the R environment.\n\n\n\nPackage\nDescription\n\n\n\n\ntidyverse\nA collection of core packages designed for data science used extensively for data preparation and wrangling.\n\n\ntsibble\nFor tidy temporal data with wrangling tools\n\n\nfable, forecast\nA collection of commonly used univariate and multivariate time series forecasting models.\n\n\ntseries\nFor performing augmented Dickey-Fuller tests to check whether a time series is stationary\n\n\n\n\npacman::p_load(readr, tidyverse, plotly, ggplot2, tsibble, tseries,\n               forecast, fable)"
  },
  {
    "objectID": "Prototype/Forecast.html#temperature-time-series-analysis",
    "href": "Prototype/Forecast.html#temperature-time-series-analysis",
    "title": "Prototype: Time Series Forecasting",
    "section": "3.1 Temperature time-series analysis",
    "text": "3.1 Temperature time-series analysis\nLet’s break down the temperature time-series analysis to look at the seasonal, trend and residual components.\n\n\nShow the code\ndata_ts.ts = ts(data_EDA$AveTemp, frequency = 12)\ndecomposed &lt;- decompose(data_ts.ts)\n\n# Plot the decomposed components\nautoplot(decomposed) +\n  ggtitle(\"Decomposition of the Temperature time-series data\") +\n  xlab(\"Year\")\n\n\n\n\n\nLet’s substract seasonality\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$seasonal\nautoplot(data_ts.adj) + \n  ggtitle(\"Decomposition of Temperature time-series data without seasonal components\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature\")\n\n\n\n\n\nSimilarly with trend\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$trend\nautoplot(data_ts.adj) +\n  ggtitle(\"Decomposition of Temperature time-series data without trend components\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature variation\")\n\n\n\n\n\nLet’s look at the ACF and PACF plots\n\n ggtsdisplay(difference(data_EDA$AveTemp, 12),\n               plot_type='partial', lag=36) +\n  labs(title=\"Seasonally differenced\", y=\"\")"
  },
  {
    "objectID": "Prototype/Forecast.html#rainfall-time-series-analysis",
    "href": "Prototype/Forecast.html#rainfall-time-series-analysis",
    "title": "Prototype: Time Series Forecasting",
    "section": "3.2 Rainfall time-series analysis",
    "text": "3.2 Rainfall time-series analysis\nLet’s break down the rainfall time-series analysis to look at the seasonal, trend and residual components.\n\n\nShow the code\ndata_ts.ts = ts(data_EDA$Rainfall, frequency = 12)\ndecomposed &lt;- decompose(data_ts.ts)\n\n# Plot the decomposed components\nautoplot(decomposed) +\n  ggtitle(\"Decomposition of the Temperature time-series data\") +\n  xlab(\"Year\")\n\n\n\n\n\nLet’s substract seasonality\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$seasonal\nautoplot(data_ts.adj) + \n  ggtitle(\"Decomposition of Rainfall time-series data without seasonal components\") +\n  xlab(\"Year\") +\n  ylab(\"Rainfall (mm)\")\n\n\n\n\n\nSimilarly with trend\n\n\nShow the code\ndata_ts.adj &lt;- data_ts.ts - decomposed$trend\nautoplot(data_ts.adj) +\n  ggtitle(\"Decomposition of Rainfall time-series data without trend components\") +\n  xlab(\"Year\") +\n  ylab(\"Rainfall variation (mm)\")\n\n\n\n\n\nLet’s look at the ACF and PACF plots\n\n\nShow the code\n ggtsdisplay(difference(data_EDA$Rainfall, 12),\n               plot_type='partial', lag=36) +\n  labs(title=\"Seasonally differenced\", y=\"\")"
  },
  {
    "objectID": "Prototype/Forecast.html#forecasting-models",
    "href": "Prototype/Forecast.html#forecasting-models",
    "title": "Prototype: Time Series Forecasting",
    "section": "4.2 Forecasting Models",
    "text": "4.2 Forecasting Models\nETS model and its parameters.\n\nARIMA model and its parameters"
  },
  {
    "objectID": "Prototype/Forecast.html#forecast-using-exponential-smoothing-state-space-model",
    "href": "Prototype/Forecast.html#forecast-using-exponential-smoothing-state-space-model",
    "title": "Prototype: Time Series Forecasting",
    "section": "5.1 Forecast using Exponential smoothing state space model",
    "text": "5.1 Forecast using Exponential smoothing state space model\nUsers can select values for the following:\n\n3 components (Error, Trend, Season),\nthe optimisation criterion\nthe number of forecast years\nthe variable (AveTemp, MaxTemp, MinTemp, TotalRain)\nregion\n\n\n\nShow the code\n#input values:\n# Error can have additive (\"A\") or multiplicative (\"M\")\ninput_error &lt;- \"A\"\n# Trend can have none (\"N\"), additive (\"A\"), damped variants (\"Ad\")\ninput_trend &lt;- \"A\"\n# season can have none (\"N\"), additive (\"A\") or multiplicative (\"M\")\n# note that multiplicative take a long time to generate\ninput_season &lt;- \"A\"\ninput_forecast_years &lt;- 1\n# information criterion to choose the model can be \"aicc\", \"aic\", \"bic\"\n# Akaike Information Criterion (AIC), Bayesian Information Criterion (BIC) and Corrected Akaike Information Criterion (AICc)\n\n#sigma\", \"mae\"  log-likelihood \"lik\", \"mse\" (Mean Square Error), \"amse\" (Average MSE, \"sigma\" (Standard deviation of residuals), or \"mae\" (Mean Absolute Error).\ninput_opt_crit &lt;- \"mae\"\n\n# can be \"North\", \"Central\", \"North-East\", \"East\", \"West\", \"All\"\ninput_region &lt;- \"North\"\n# can be \"MaxTemp\", \"MaxTemp\", \"MinTemp\", \"TotalRainfall\"\ninput_variable &lt;- \"MaxTemp\"\n\n\nif (input_region != \"All\") {\n  data &lt;- data_region_ts %&gt;% \n    filter(Region == input_region) %&gt;% \n    as_tsibble(index = (YearMonth))\n} else {\n  data &lt;-data_ts\n}\n \nif (input_variable == \"Rainfall\"){\n    data &lt;- data %&gt;% rename(Value = Rainfall)\n    displayText = \"Rainfall\"\n    displayUnit = \"mm\"\n} else {\n  if (input_variable == \"MeanTemp\") {\n    data &lt;- data %&gt;% rename(Value = AveTemp)\n  } else if (input_variable == \"MaxTemp\") {\n    data &lt;- data %&gt;% rename(Value = MaxTemp)\n  } else {\n    data &lt;- data %&gt;% rename(Value = MinTemp)\n  }\n  displayText = \"Temperature\"\n  displayUnit = \"°C\"\n}\n\nets_model &lt;- data %&gt;%\n  model(ETS(Value ~ error(input_error) + \n              trend(input_trend) + season(input_season), \n            opt_crit = input_opt_crit)) \n\n#can get the IC and OC values\nets_model %&gt;% glance()\n\n\n# A tibble: 1 × 9\n  .model                      sigma2 log_lik   AIC  AICc   BIC   MSE  AMSE   MAE\n  &lt;chr&gt;                        &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 \"ETS(Value ~ error(input_e…  0.392   -991. 2015. 2017. 2083. 0.376 0.394 0.473\n\n\nShow the code\nforecast_values &lt;- forecast(ets_model, h = input_forecast_years * 12)  \n\nquantiles &lt;- forecast_values %&gt;%\n  group_by(.model) %&gt;%\n  summarise(lower_80 = quantile(Value, 0.1),\n            upper_80 = quantile(Value, 0.9),\n            lower_95 = quantile(Value, 0.025),\n            upper_95 = quantile(Value, 0.975))\n\np &lt;- ggplot() +\n  geom_line(data = data, \n            aes(x = Date, y = Value, color = \"Observed\"), \n            linetype = \"solid\") +\n  geom_line(data = forecast_values, \n            aes(x = as.Date(YearMonth), y = .mean, color = \"Forecast\"), \n            linetype = \"dashed\") +\n  geom_point(data = forecast_values, \n             aes(x = as.Date(YearMonth), y = .mean, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Forecasted:\", round(.mean, 1), displayUnit)),\n            size = 1, color = \"red\") +\n  geom_point(data = data, \n             aes(x = Date, y = Value, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Observed:\", round(Value, 1), displayUnit)),\n             size = 1, color = \"blue\") +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_80, \n                  ymax = upper_80), fill = \"black\", alpha = 0.5) +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_95, \n                  ymax = upper_95), fill = \"gray\", alpha = 0.5) +\n  xlab(\"Year\") +\n  ylab(displayText) +\n  ggtitle(paste(\"Forecast \", displayText)) +\n  scale_color_manual(values = c(\"Observed\" = \"blue\", \"Forecast\" = \"red\")) +\n  theme_minimal()\n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Prototype/Forecast.html#forecast-using-arima",
    "href": "Prototype/Forecast.html#forecast-using-arima",
    "title": "Prototype: Time Series Forecasting",
    "section": "5.2 Forecast using ARIMA",
    "text": "5.2 Forecast using ARIMA\nUsers can select values for the following:\n\n3 components (p, d, q),\nstepwise option (TRUE/FALSE)\nthe number of forecast years\nthe variable (AveTemp, MaxTemp, MinTemp, TotalRain)\nregion\n\n\n\nShow the code\ninput_stepwise &lt;- TRUE\ninput_forecast_years &lt;- 1\n#non seasonal p = [1,5], d=[0,2], q=[0,5]\n#seasonal P=[0,2], D=[0,1], Q=[0,2]\ninput_p &lt;- 2\ninput_d &lt;- 0\ninput_q &lt;- 1\n# can be \"North\", \"Central\", \"North-East\", \"East\", \"West\", \"All\"\ninput_region &lt;- \"North\"\n# can be \"MaxTemp\", \"MaxTemp\", \"MinTemp\", \"TotalRainfall\"\ninput_variable &lt;- \"TotalRainfall\"\n\nif (input_region != \"All\") {\n  data &lt;- data_region_ts %&gt;% \n    filter(Region == input_region) %&gt;% \n    as_tsibble(index = (YearMonth))\n} else {\n  data &lt;-data_ts\n}\n \nif (input_variable == \"Rainfall\"){\n    data &lt;- data %&gt;% rename(Value = Rainfall)\n    displayText = \"Rainfall\"\n    displayUnit = \"mm\"\n} else {\n  if (input_variable == \"MeanTemp\") {\n    data &lt;- data %&gt;% rename(Value = AveTemp)\n  } else if (input_variable == \"MaxTemp\") {\n    data &lt;- data %&gt;% rename(Value = MaxTemp)\n  } else {\n    data &lt;- data %&gt;% rename(Value = MinTemp)\n  }\n  displayText = \"Temperature\"\n  displayUnit = \"°C\"\n}\n\nets_model &lt;- data %&gt;%\n  model(ARIMA(Value ~ pdq(input_p, input_d, input_q), \n              stepwise = input_stepwise))\n\n#can get the IC and OC values\nets_model %&gt;% glance()\n\n\n# A tibble: 1 × 8\n  .model                      sigma2 log_lik   AIC  AICc   BIC ar_roots ma_roots\n  &lt;chr&gt;                        &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt;   &lt;list&gt;  \n1 ARIMA(Value ~ pdq(input_p,…  0.349   -352.  713.  713.  733. &lt;cpl&gt;    &lt;cpl&gt;   \n\n\nShow the code\nforecast_values &lt;- forecast(ets_model, h = input_forecast_years * 12)  \n\nquantiles &lt;- forecast_values %&gt;%\n  group_by(.model) %&gt;%\n  summarise(lower_80 = quantile(Value, 0.1),\n            upper_80 = quantile(Value, 0.9),\n            lower_95 = quantile(Value, 0.025),\n            upper_95 = quantile(Value, 0.975))\n\np &lt;- ggplot() +\n  geom_line(data = data, \n            aes(x = Date, y = Value, color = \"Observed\"), \n            linetype = \"solid\") +\n  geom_line(data = forecast_values, \n            aes(x = as.Date(YearMonth), y = .mean, color = \"Forecast\"), \n            linetype = \"dashed\") +\n  geom_point(data = forecast_values, \n             aes(x = as.Date(YearMonth), y = .mean, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Forecasted:\", round(.mean, 1), displayUnit)),\n            size = 1, color = \"red\") +\n  geom_point(data = data, \n             aes(x = Date, y = Value, \n                 text = paste(\"YearMonth:\", YearMonth, \n                              \"&lt;br&gt;Observed:\", round(Value, 1), displayUnit)),\n             size = 1, color = \"blue\") +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_80, \n                  ymax = upper_80), fill = \"black\", alpha = 0.5) +\n  geom_ribbon(data = quantiles, \n              aes(x = as.Date(YearMonth), \n                  ymin = lower_95, \n                  ymax = upper_95), fill = \"gray\", alpha = 0.5) +\n  xlab(\"Year\") +\n  ylab(displayText) +\n  ggtitle(paste(\"Forecast \", displayText)) +\n  scale_color_manual(values = c(\"Observed\" = \"blue\", \"Forecast\" = \"red\")) +\n  theme_minimal()\n\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Station/station.html",
    "href": "Station/station.html",
    "title": "Stations",
    "section": "",
    "text": "#library(devtools)\n#install_github(\"andrew-loh/neaSG\", force = TRUE)\n\n\npacman::p_load(tmap, sf, tidyverse, sfdep, mapview, leaflet.providers, neaSG)\n\n\nstn &lt;- get_weatherstns()\n\n\nglimpse(stn)\n\nRows: 63\nColumns: 5\n$ id                 &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\",…\n$ device_id          &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\",…\n$ name               &lt;chr&gt; \"Alexandra Road\", \"Ang Mo Kio Avenue 5\", \"Banyan Ro…\n$ location.latitude  &lt;dbl&gt; 1.29370, 1.37640, 1.25600, 1.38240, 1.31910, 1.3800…\n$ location.longitude &lt;dbl&gt; 103.8125, 103.8492, 103.6790, 103.7603, 103.8191, 1…\n\n\n\nstn_sf &lt;- st_as_sf(stn, \n                   coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326)\n\n\nglimpse(stn_sf)\n\nRows: 63\nColumns: 4\n$ id        &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\", \"S107\", …\n$ device_id &lt;chr&gt; \"S77\", \"S109\", \"S117\", \"S64\", \"S90\", \"S114\", \"S50\", \"S107\", …\n$ name      &lt;chr&gt; \"Alexandra Road\", \"Ang Mo Kio Avenue 5\", \"Banyan Road\", \"Buk…\n$ geometry  &lt;POINT [°]&gt; POINT (103.8125 1.2937), POINT (103.8492 1.3764), POIN…\n\n\n\ntmap_mode(\"view\")\n\ntm_basemap(\"CartoDB.Positron\") +\n  tm_shape(stn_sf)+\n  tm_dots(col = \"black\", size = 0.1)+\n  tm_view(set.zoom.limits = c(11,12))\n\n\n\n\n\n\n\nstn_selected &lt;- stn_sf %&gt;% \n  filter(id %in% c(\"S60\", \"S117\", \"S116\", \"S115\", \"S113\", \"S111\", \"S107\", \"S201\", \"S50\", \"S43\", \"S44\", \"S221\", \"S24\", \"S121\", \"S109\", \"S114\", \"S900\", \"S209\", \"S104\"))\n         \nglimpse(stn_selected)\n\nRows: 19\nColumns: 4\n$ id        &lt;chr&gt; \"S109\", \"S117\", \"S114\", \"S50\", \"S107\", \"S43\", \"S113\", \"S44\",…\n$ device_id &lt;chr&gt; \"S109\", \"S117\", \"S114\", \"S50\", \"S107\", \"S43\", \"S113\", \"S44\",…\n$ name      &lt;chr&gt; \"Ang Mo Kio Avenue 5\", \"Banyan Road\", \"Choa Chu Kang Avenue …\n$ geometry  &lt;POINT [°]&gt; POINT (103.8492 1.3764), POINT (103.679 1.256), POINT …\n\n\n\ntmap_mode(\"view\")\n\ntm_basemap(\"CartoDB.Positron\") +\n  tm_shape(stn_selected)+\n  tm_dots(col = \"black\", size = 0.1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The heat is on!  Singapore’s Race Against Climate Change",
    "section": "",
    "text": "Join us in our journey to analyse the weather conditions in Singapore and predict the weather in the next few years.\nTeam Members:\n\nChock Wan Kee (Master of IT in Business (Analytics) @ SMU)\nNoel Ng (Master of IT in Business (Analytics) @ SMU)\nVanessa Heng (Master of IT in Business (Analytics) @ SMU)"
  }
]