{
  "hash": "48ce4d796c07d43bf9673e348d6be7a2",
  "result": {
    "markdown": "---\ntitle: \"Data Preparation\"\ndate: \"3 March 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n  error: true\n---\n\n\n# 1 Overview\n\nThis page will explain in detail how we extract the data from the [Meteorological Service Singapore (MSS)](http://www.weather.gov.sg/climate-historical-daily/) website and how we clean the data for our subsequent analysis.\n\n# 2 Data Extraction\n\nOn the [MSS Historical Daily Records](#0) page, we are able to select the weather station, month and year to display. After that, we can click on the CSV option to download the data.\n\n![](images/clipboard-2867577995.png){width=\"625\"}\n\nFor this project, we will analyse the historical temperature and rainfall data collected by MSS based on the 18 weather stations (Table 1).\n\nThe selected stations with complete datasets from 1980 onwards provide a long-term perspective on climate trends, which is crucial for accurate modelling and prediction. Automated instruments from 2009 enhance data reliability and allow continuous monitoring without manual intervention gaps.\n\n![](images/clipboard-3377283505.png){width=\"572\"}\n\nAs there are 42 years of monthly data to download for each station, my team has written a Robotic Process Automation script using UiPath software to download all the necessary data. In total, we have 5,552 CSV files downloaded.\n\n![](images/clipboard-2705217927.png){width=\"561\"}\n\n# 3 Data Preparation\n\n## 3.1 Installing R packages\n\nThe code below uses `p_load()` of the Pacman package to check if all the required packages are installed on the laptop. If they are, then they will be launched into the R environment.\n\n|                                                                               |                                                                                                              |\n|------------------------------|------------------------------------------|\n| **Package**                                                                   | **Description**                                                                                              |\n| [**tidyverse**](https://www.tidyverse.org/)                                   | A collection of core packages designed for data science used extensively for data preparation and wrangling. |\n| [**lubridate**](https://lubridate.tidyverse.org/reference/make_datetime.html) | For manipulating date-times.                                                                                 |\n| [**janitor**](https://sfirke.github.io/janitor/reference/)                    | For quick formatting of data frame columns.                                                                  |\n| [**fs**](https://github.com/r-lib/fs)                                         | For retrieving a list of file names in our directory for import into R                                       |\n| [**visdat**](https://www.rdocumentation.org/packages/visdat/versions/0.6.0)   | For checking missing values in a dataframe                                                                   |\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readr, tidyverse, forecast, janitor, fs, visdat)\n```\n:::\n\n\n## 3.2 Importing data\n\nLet's read all the 5,547 CSV files downloaded for the 18 weather stations that have records from the year 1980 onwards.\n\n-   [`dir_ls()`](https://fs.r-lib.org/reference/dir_ls.html) function from the **fs** package in R to list *filenames* in our directory where we have saved the monthly historical records.\n\n-   [`map_df()`](https://www.rdocumentation.org/packages/purrr/versions/0.2.5/topics/map) function from the **purrr** package is used to iterate over each file in the directory.\n\n-   `locale` argument in `read_csv()` is to specify the encoding as [Latin-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1), as some of the headers contain special characters, like the degree symbol (°). The Latin-1 encoding ensures R can read and process such special characters.\n\n-   [`col_types`](https://readr.tidyverse.org/reference/cols.html) argument imports all columns as character data type.\n\n-   [`clean_names()`](https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names) of the **janitor** package converts into snake case and transliterates special characters such as the degree symbol (°) to ASCII.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilenames <- fs::dir_ls(\"data/raw_data/\") \n\n# Read all files and clean the column names\ndata <- filenames %>%\n    map_df(~ read_csv(.x, \n                      locale = locale(encoding = \"latin1\"),\n                      col_types = cols(.default = \"character\")\n                      ) %>% \n             janitor::clean_names()\n    ) \n\nglimpse(data)\nwrite_rds(data, \"data/data.rds\")\n```\n:::\n\n\n::: callout-note\nAll the 18 weather stations have a total of 168,836 records.\n\nThe data shows that there are two sets of variables for mean, maximum, and minimum temperature records:\n\n-   mean_temperature_c, maximum_temperature_c, and minimum_temperature_c\n\n-   mean_temperature_a_c, maximum_temperature_a_c, and minimum_temperature_a_c\n\nSome year's data are in the first set of variables and others are in the second set of variables. This might happen during `clean_names()` where there is a minor difference in the column names from different files.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_rds(\"data/data.rds\")\n```\n:::\n\n\n\nIt will be meaningful to also analyse weather data by region in Singapore. Hence, we also searched for each weather station's region on public websites like the HDB website and data.gov.sg. Let's import the region information now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- read_csv(\"data/Region.csv\") \nglimpse(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 18\nColumns: 2\n$ Station <chr> \"Admiralty\", \"Ang Mo Kio\", \"Boon Lay (East)\", \"Changi\", \"Choa …\n$ Region  <chr> \"North\", \"North-East\", \"West\", \"East\", \"West\", \"West\", \"East\",…\n```\n:::\n:::\n\n\n## 3.3 Data Wrangling\n\n### 3.3.1 Remove extra columns\n\nLet's use the `coalesce()` function to copy the values from the second set of temperature values to the first set and then deselect the second set of columns. We are also not focusing on the wind speed variables, hence we will deselect the 2 variables on wind speed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$mean_temperature_c <- coalesce(data$mean_temperature_c, \n                                    data$mean_temperature_a_c) \ndata$maximum_temperature_c <- coalesce(data$maximum_temperature_c, \n                                       data$maximum_temperature_a_c)\ndata$minimum_temperature_c <- coalesce(data$minimum_temperature_c,     \n                                       data$minimum_temperature_a_c)\n\ndata %>% \n  select(-c(mean_temperature_a_c, \n            maximum_temperature_a_c, \n            minimum_temperature_a_c, \n            mean_wind_speed_km_h, \n            max_wind_speed_km_h))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168,836 × 11\n   station    year  month day   daily_rainfall_total_mm highest_30_min_rainfal…¹\n   <chr>      <chr> <chr> <chr> <chr>                   <chr>                   \n 1 Paya Lebar 1981  1     1     0                       \"\\u0097\"                \n 2 Paya Lebar 1981  1     2     0.4                     \"\\u0097\"                \n 3 Paya Lebar 1981  1     3     0                       \"\\u0097\"                \n 4 Paya Lebar 1981  1     4     3.3                     \"\\u0097\"                \n 5 Paya Lebar 1981  1     5     0                       \"\\u0097\"                \n 6 Paya Lebar 1981  1     6     0.8                     \"\\u0097\"                \n 7 Paya Lebar 1981  1     7     4.6                     \"\\u0097\"                \n 8 Paya Lebar 1981  1     8     2.3                     \"\\u0097\"                \n 9 Paya Lebar 1981  1     9     0.3                     \"\\u0097\"                \n10 Paya Lebar 1981  1     10    0                       \"\\u0097\"                \n# ℹ 168,826 more rows\n# ℹ abbreviated name: ¹​highest_30_min_rainfall_mm\n# ℹ 5 more variables: highest_60_min_rainfall_mm <chr>,\n#   highest_120_min_rainfall_mm <chr>, mean_temperature_c <chr>,\n#   maximum_temperature_c <chr>, minimum_temperature_c <chr>\n```\n:::\n\n```{.r .cell-code}\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 168,836\nColumns: 16\n$ station                     <chr> \"Paya Lebar\", \"Paya Lebar\", \"Paya Lebar\", …\n$ year                        <chr> \"1981\", \"1981\", \"1981\", \"1981\", \"1981\", \"1…\n$ month                       <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1…\n$ day                         <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ daily_rainfall_total_mm     <chr> \"0\", \"0.4\", \"0\", \"3.3\", \"0\", \"0.8\", \"4.6\",…\n$ highest_30_min_rainfall_mm  <chr> \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_60_min_rainfall_mm  <chr> \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ highest_120_min_rainfall_mm <chr> \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_c          <chr> \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ maximum_temperature_c       <chr> \"30.8\", \"29.5\", \"30.4\", \"30.7\", \"27.2\", \"3…\n$ minimum_temperature_c       <chr> \"22.7\", \"23.1\", \"23.5\", \"23.5\", \"23.2\", \"2…\n$ mean_wind_speed_km_h        <chr> \"14.3\", \"9.4\", \"11.7\", \"9.4\", \"9.1\", \"9.6\"…\n$ max_wind_speed_km_h         <chr> \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\…\n$ mean_temperature_a_c        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ maximum_temperature_a_c     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ minimum_temperature_a_c     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n:::\n:::\n\n\n### 3.3.2 Remove weird characters\n\nThere are some weird characters ('\\u0097') in the data frame. Let's replace them with NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  mutate_all(~ ifelse(. == \"\\u0097\", NA, .))\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 168,836\nColumns: 16\n$ station                     <chr> \"Paya Lebar\", \"Paya Lebar\", \"Paya Lebar\", …\n$ year                        <chr> \"1981\", \"1981\", \"1981\", \"1981\", \"1981\", \"1…\n$ month                       <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1…\n$ day                         <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9…\n$ daily_rainfall_total_mm     <chr> \"0\", \"0.4\", \"0\", \"3.3\", \"0\", \"0.8\", \"4.6\",…\n$ highest_30_min_rainfall_mm  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ highest_60_min_rainfall_mm  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ highest_120_min_rainfall_mm <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ mean_temperature_c          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ maximum_temperature_c       <chr> \"30.8\", \"29.5\", \"30.4\", \"30.7\", \"27.2\", \"3…\n$ minimum_temperature_c       <chr> \"22.7\", \"23.1\", \"23.5\", \"23.5\", \"23.2\", \"2…\n$ mean_wind_speed_km_h        <chr> \"14.3\", \"9.4\", \"11.7\", \"9.4\", \"9.1\", \"9.6\"…\n$ max_wind_speed_km_h         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ mean_temperature_a_c        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ maximum_temperature_a_c     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ minimum_temperature_a_c     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n:::\n:::\n\n\n### 3.3.3 Tidy the data\n\nFinally, let's clean up the weather data and create a column for date, change the necessary columns to numeric, and shorten the column names for simplicity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- data %>% \n  mutate(station = station,\n       year = as.numeric(year),\n       Date = make_date(year = year, month = month, day = 1),\n       month = lubridate::month(Date, label = TRUE),         \n       day = as.numeric(day),\n       daily_rainfall_total_mm = as.numeric(daily_rainfall_total_mm), \n       highest_30_min_rainfall_mm = as.numeric(highest_30_min_rainfall_mm), \n       highest_60_min_rainfall_mm = as.numeric(highest_60_min_rainfall_mm),\n       highest_120_min_rainfall_mm = as.numeric(highest_120_min_rainfall_mm),\n       mean_temperature_c = as.numeric(mean_temperature_c), \n       maximum_temperature_c = as.numeric(maximum_temperature_c), \n       minimum_temperature_c = as.numeric(minimum_temperature_c)) %>% \n  rename(\n    Station = station,\n    Year = year,\n    Month = month,\n    Day = day,\n    Rainfall = daily_rainfall_total_mm,\n    Rainfall30 = highest_30_min_rainfall_mm,\n    Rainfall60 = highest_60_min_rainfall_mm,\n    Rainfall120 = highest_120_min_rainfall_mm,\n    MeanTemperature = mean_temperature_c,\n    MaxTemperature = maximum_temperature_c,\n    MinTemperature = minimum_temperature_c\n  ) %>% \n  subset(select = -c(mean_temperature_a_c,\n                     maximum_temperature_a_c,\n                     minimum_temperature_a_c, \n                     mean_wind_speed_km_h, \n                     max_wind_speed_km_h))\n```\n:::\n\n\n### 3.3.4 Merge datasets\n\nLet's join the weather data with its region information using the common variable 'Station'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- merge(weather, region, by= \"Station\")\nglimpse(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 168,836\nColumns: 13\n$ Station         <chr> \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\", \"A…\n$ Year            <dbl> 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, …\n$ Month           <ord> Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan,…\n$ Day             <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Rainfall        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Rainfall30      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Rainfall60      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Rainfall120     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ MeanTemperature <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ MaxTemperature  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ MinTemperature  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Date            <date> 2009-01-01, 2009-01-01, 2009-01-01, 2009-01-01, 2009-…\n$ Region          <chr> \"North\", \"North\", \"North\", \"North\", \"North\", \"North\", …\n```\n:::\n:::\n\n\n### 3.3.5 Create subsets of data\n\nLet's create subsets of weather data for only Temperature or Rainfall and save them as RDS files for easy loading when we are developing for the subsequent analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTemp_YM <- weather %>% \n   group_by(Station, Region, Year, Month) %>% \n   reframe(Date = Date,            \n           MeanTemp = round(mean(MeanTemperature, na.rm = TRUE),1),\n           MaxTemp = round(max(MaxTemperature, na.rm = TRUE),1),\n           MinTemp = round(min(MinTemperature, na.rm = TRUE),1) ) %>% \n   distinct() %>% \n   ungroup() %>% \n   filter(!is.na(MeanTemp))\n\nwrite_rds(Temp_YM, \"data/temperature.rds\")\n\nRainfall_YM <- weather %>% \n   group_by(Station, Region, Year, Month) %>% \n   reframe(Date = Date,\n           TotalRainfall = round(sum(Rainfall, na.rm = TRUE),1),\n           TotalRainfall30 = round(sum(Rainfall30, na.rm = TRUE),1),\n           TotalRainfall60 = round(sum(Rainfall60, na.rm = TRUE),1),\n           TotalRainfall120 = round(sum(Rainfall120, na.rm = TRUE),1)) %>% \n   distinct() %>% \n   ungroup() %>% \n   filter(!is.na(TotalRainfall))\n\nwrite_rds(Rainfall_YM, \"data/rainfall.rds\")\n```\n:::\n\n\nCheck to ensure there is no missing data in Temp_YM and Rainfall_YM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_miss(Temp_YM)\n```\n\n::: {.cell-output-display}\n![](Data_Preparation_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nvis_miss(Rainfall_YM)\n```\n\n::: {.cell-output-display}\n![](Data_Preparation_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\nFinally, we create further subsets to be used in Confirmatory Data Analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTemp_Annual <- weather %>%\n  group_by(Station, Region, Year) %>%\n  summarise(Avg_Mean_Temp = round(mean(MeanTemperature, na.rm = TRUE),1),\n            Avg_Max_Temp = round(mean(MaxTemperature, na.rm = TRUE),1),\n            Avg_Min_Temp = round(mean(MinTemperature, na.rm = TRUE),1),\n            Max_Temp = round(max(MaxTemperature, na.rm = TRUE),1),\n            Min_Temp = round(min(MinTemperature, na.rm = TRUE),1)) %>%\n  distinct() %>%\n  ungroup() %>%\n  filter(!is.na(Avg_Mean_Temp))\n\nwrite_rds(Temp_Annual, \"data/temp_annual.rds\")\n\nTemp_Monthly <- weather %>%\n  group_by(Station, Region, Year, Month) %>%\n  summarise(Avg_Mean_Temp = round(mean(MeanTemperature, na.rm = TRUE),1),\n            Avg_Max_Temp = round(mean(MaxTemperature, na.rm = TRUE),1),\n            Avg_Min_Temp = round(mean(MinTemperature, na.rm = TRUE),1),\n            Max_Temp = round(max(MaxTemperature, na.rm = TRUE),1),\n            Min_Temp = round(min(MinTemperature, na.rm = TRUE),1)) %>%\n  distinct() %>%\n  ungroup() %>%\n  filter(!is.na(Avg_Mean_Temp))\n\nwrite_rds(Temp_Monthly, \"data/temp_monthly.rds\")\n\nRainfall_Annual <- weather %>%\n  group_by(Station, Region, Year) %>% \n   reframe(Date = Date,\n           Total_Rf = round(sum(Rainfall, na.rm = TRUE),1),\n           Total_Rf_30 = round(sum(Rainfall30, na.rm = TRUE),1),\n           Total_Rf_60 = round(sum(Rainfall60, na.rm = TRUE),1),\n           Total_Rf_120 = round(sum(Rainfall120, na.rm = TRUE),1),\n           Avg_Total_Rf = round(mean(Rainfall, na.rm = TRUE),1),\n           Avg_Total_Rf30 = round(mean(Rainfall30, na.rm = TRUE),1),\n           Avg_Total_Rf60 = round(mean(Rainfall60, na.rm = TRUE),1),\n           Avg_Total_Rf120 = round(mean(Rainfall120, na.rm = TRUE),1),\n           Min_Total_Rf = round(min(Rainfall, na.rm = TRUE),1),\n           Max_Total_Rf = round(max(Rainfall, na.rm = TRUE),1)) %>% \n   distinct() %>% \n   ungroup() %>% \n   filter(!is.na(Total_Rf))\n\nwrite_rds(Rainfall_Annual, \"data/rf_annual.rds\")\n\nRainfall_Monthly <- weather %>%\n  group_by(Station, Region, Year, Month) %>% \n   reframe(Date = Date,\n           Total_Rf = round(sum(Rainfall, na.rm = TRUE),1),\n           Total_Rf_30 = round(sum(Rainfall30, na.rm = TRUE),1),\n           Total_Rf_60 = round(sum(Rainfall60, na.rm = TRUE),1),\n           Total_Rf_120 = round(sum(Rainfall120, na.rm = TRUE),1),\n           Avg_Total_Rf = round(mean(Rainfall, na.rm = TRUE),1),\n           Avg_Total_Rf30 = round(mean(Rainfall30, na.rm = TRUE),1),\n           Avg_Total_Rf60 = round(mean(Rainfall60, na.rm = TRUE),1),\n           Avg_Total_Rf120 = round(mean(Rainfall120, na.rm = TRUE),1),\n           Min_Total_Rf = round(min(Rainfall, na.rm = TRUE),1),\n           Max_Total_Rf = round(max(Rainfall, na.rm = TRUE),1)) %>% \n   distinct() %>% \n   ungroup() %>% \n   filter(!is.na(Total_Rf))\n\nwrite_rds(Rainfall_Monthly, \"data/rf_monthly.rds\")\n```\n:::\n",
    "supporting": [
      "Data_Preparation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}